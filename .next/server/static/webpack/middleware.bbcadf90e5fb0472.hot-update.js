"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @license React\n * react-server-dom-webpack-server.edge.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \n true && function() {\n    function voidHandler() {}\n    function getIteratorFn(maybeIterable) {\n        if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[\"@@iterator\"];\n        return \"function\" === typeof maybeIterable ? maybeIterable : null;\n    }\n    function _defineProperty(obj, key, value) {\n        a: if (\"object\" == typeof key && key) {\n            var e = key[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                key = e.call(key, \"string\");\n                if (\"object\" != typeof key) break a;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            key = String(key);\n        }\n        key = \"symbol\" == typeof key ? key : key + \"\";\n        key in obj ? Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : obj[key] = value;\n        return obj;\n    }\n    function handleErrorInNextTick(error) {\n        setTimeoutOrImmediate(function() {\n            throw error;\n        });\n    }\n    function writeChunkAndReturn(destination, chunk) {\n        if (0 !== chunk.byteLength) if (2048 < chunk.byteLength) 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(2048), writtenBytes = 0), destination.enqueue(chunk);\n        else {\n            var allowableBytes = currentView.length - writtenBytes;\n            allowableBytes < chunk.byteLength && (0 === allowableBytes ? destination.enqueue(currentView) : (currentView.set(chunk.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), chunk = chunk.subarray(allowableBytes)), currentView = new Uint8Array(2048), writtenBytes = 0);\n            currentView.set(chunk, writtenBytes);\n            writtenBytes += chunk.byteLength;\n        }\n        return !0;\n    }\n    function stringToChunk(content) {\n        return textEncoder.encode(content);\n    }\n    function byteLengthOfChunk(chunk) {\n        return chunk.byteLength;\n    }\n    function closeWithError(destination, error) {\n        \"function\" === typeof destination.error ? destination.error(error) : destination.close();\n    }\n    function isClientReference(reference) {\n        return reference.$$typeof === CLIENT_REFERENCE_TAG$1;\n    }\n    function registerClientReferenceImpl(proxyImplementation, id, async) {\n        return Object.defineProperties(proxyImplementation, {\n            $$typeof: {\n                value: CLIENT_REFERENCE_TAG$1\n            },\n            $$id: {\n                value: id\n            },\n            $$async: {\n                value: async\n            }\n        });\n    }\n    function bind() {\n        var newFn = FunctionBind.apply(this, arguments);\n        if (this.$$typeof === SERVER_REFERENCE_TAG) {\n            null != arguments[0] && console.error('Cannot bind \"this\" of a Server Action. Pass null or undefined as the first argument to .bind().');\n            var args = ArraySlice.call(arguments, 1), $$typeof = {\n                value: SERVER_REFERENCE_TAG\n            }, $$id = {\n                value: this.$$id\n            };\n            args = {\n                value: this.$$bound ? this.$$bound.concat(args) : args\n            };\n            return Object.defineProperties(newFn, {\n                $$typeof: $$typeof,\n                $$id: $$id,\n                $$bound: args,\n                $$location: {\n                    value: this.$$location,\n                    configurable: !0\n                },\n                bind: {\n                    value: bind,\n                    configurable: !0\n                }\n            });\n        }\n        return newFn;\n    }\n    function getReference(target, name) {\n        switch(name){\n            case \"$$typeof\":\n                return target.$$typeof;\n            case \"$$id\":\n                return target.$$id;\n            case \"$$async\":\n                return target.$$async;\n            case \"name\":\n                return target.name;\n            case \"defaultProps\":\n                return;\n            case \"toJSON\":\n                return;\n            case Symbol.toPrimitive:\n                return Object.prototype[Symbol.toPrimitive];\n            case Symbol.toStringTag:\n                return Object.prototype[Symbol.toStringTag];\n            case \"__esModule\":\n                var moduleId = target.$$id;\n                target.default = registerClientReferenceImpl(function() {\n                    throw Error(\"Attempted to call the default export of \" + moduleId + \" from the server but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n                }, target.$$id + \"#\", target.$$async);\n                return !0;\n            case \"then\":\n                if (target.then) return target.then;\n                if (target.$$async) return;\n                var clientReference = registerClientReferenceImpl({}, target.$$id, !0), proxy = new Proxy(clientReference, proxyHandlers$1);\n                target.status = \"fulfilled\";\n                target.value = proxy;\n                return target.then = registerClientReferenceImpl(function(resolve) {\n                    return Promise.resolve(resolve(proxy));\n                }, target.$$id + \"#then\", !1);\n        }\n        if (\"symbol\" === typeof name) throw Error(\"Cannot read Symbol exports. Only named exports are supported on a client module imported on the server.\");\n        clientReference = target[name];\n        clientReference || (clientReference = registerClientReferenceImpl(function() {\n            throw Error(\"Attempted to call \" + String(name) + \"() from the server but \" + String(name) + \" is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, target.$$id + \"#\" + name, target.$$async), Object.defineProperty(clientReference, \"name\", {\n            value: name\n        }), clientReference = target[name] = new Proxy(clientReference, deepProxyHandlers));\n        return clientReference;\n    }\n    function trimOptions(options) {\n        if (null == options) return null;\n        var hasProperties = !1, trimmed = {}, key;\n        for(key in options)null != options[key] && (hasProperties = !0, trimmed[key] = options[key]);\n        return hasProperties ? trimmed : null;\n    }\n    function prepareStackTrace(error, structuredStackTrace) {\n        error = (error.name || \"Error\") + \": \" + (error.message || \"\");\n        for(var i = 0; i < structuredStackTrace.length; i++)error += \"\\n    at \" + structuredStackTrace[i].toString();\n        return error;\n    }\n    function parseStackTrace(error, skipFrames) {\n        a: {\n            var previousPrepare = Error.prepareStackTrace;\n            Error.prepareStackTrace = prepareStackTrace;\n            try {\n                var stack = String(error.stack);\n                break a;\n            } finally{\n                Error.prepareStackTrace = previousPrepare;\n            }\n            stack = void 0;\n        }\n        stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n        error = stack.indexOf(\"react-stack-bottom-frame\");\n        -1 !== error && (error = stack.lastIndexOf(\"\\n\", error));\n        -1 !== error && (stack = stack.slice(0, error));\n        stack = stack.split(\"\\n\");\n        for(error = []; skipFrames < stack.length; skipFrames++)if (previousPrepare = frameRegExp.exec(stack[skipFrames])) {\n            var name = previousPrepare[1] || \"\";\n            \"<anonymous>\" === name && (name = \"\");\n            var filename = previousPrepare[2] || previousPrepare[5] || \"\";\n            \"<anonymous>\" === filename && (filename = \"\");\n            error.push([\n                name,\n                filename,\n                +(previousPrepare[3] || previousPrepare[6]),\n                +(previousPrepare[4] || previousPrepare[7])\n            ]);\n        }\n        return error;\n    }\n    function createTemporaryReference(temporaryReferences, id) {\n        var reference = Object.defineProperties(function() {\n            throw Error(\"Attempted to call a temporary Client Reference from the server but it is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, {\n            $$typeof: {\n                value: TEMPORARY_REFERENCE_TAG\n            }\n        });\n        reference = new Proxy(reference, proxyHandlers);\n        temporaryReferences.set(reference, id);\n        return reference;\n    }\n    function noop$1() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n        index = thenableState[index];\n        void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop$1, noop$1), thenable = index);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return thenable.value;\n            case \"rejected\":\n                throw thenable.reason;\n            default:\n                \"string\" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenableState = thenable, thenableState.status = \"pending\", thenableState.then(function(fulfilledValue) {\n                    if (\"pending\" === thenable.status) {\n                        var fulfilledThenable = thenable;\n                        fulfilledThenable.status = \"fulfilled\";\n                        fulfilledThenable.value = fulfilledValue;\n                    }\n                }, function(error) {\n                    if (\"pending\" === thenable.status) {\n                        var rejectedThenable = thenable;\n                        rejectedThenable.status = \"rejected\";\n                        rejectedThenable.reason = error;\n                    }\n                }));\n                switch(thenable.status){\n                    case \"fulfilled\":\n                        return thenable.value;\n                    case \"rejected\":\n                        throw thenable.reason;\n                }\n                suspendedThenable = thenable;\n                throw SuspenseException;\n        }\n    }\n    function getSuspendedThenable() {\n        if (null === suspendedThenable) throw Error(\"Expected a suspended thenable. This is a bug in React. Please file an issue.\");\n        var thenable = suspendedThenable;\n        suspendedThenable = null;\n        return thenable;\n    }\n    function getThenableStateAfterSuspending() {\n        var state = thenableState || [];\n        state._componentDebugInfo = currentComponentDebugInfo;\n        thenableState = currentComponentDebugInfo = null;\n        return state;\n    }\n    function unsupportedHook() {\n        throw Error(\"This Hook is not supported in Server Components.\");\n    }\n    function unsupportedRefresh() {\n        throw Error(\"Refreshing the cache is not supported in Server Components.\");\n    }\n    function unsupportedContext() {\n        throw Error(\"Cannot read a Client Context from a Server Component.\");\n    }\n    function resolveOwner() {\n        if (currentOwner) return currentOwner;\n        if (supportsComponentStorage) {\n            var owner = componentStorage.getStore();\n            if (owner) return owner;\n        }\n        return null;\n    }\n    function resetOwnerStackLimit() {\n        var now = getCurrentTime();\n        1e3 < now - lastResetTime && (ReactSharedInternalsServer.recentlyCreatedOwnerStacks = 0, lastResetTime = now);\n    }\n    function isObjectPrototype(object) {\n        if (!object) return !1;\n        var ObjectPrototype = Object.prototype;\n        if (object === ObjectPrototype) return !0;\n        if (getPrototypeOf(object)) return !1;\n        object = Object.getOwnPropertyNames(object);\n        for(var i = 0; i < object.length; i++)if (!(object[i] in ObjectPrototype)) return !1;\n        return !0;\n    }\n    function isSimpleObject(object) {\n        if (!isObjectPrototype(getPrototypeOf(object))) return !1;\n        for(var names = Object.getOwnPropertyNames(object), i = 0; i < names.length; i++){\n            var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);\n            if (!descriptor || !descriptor.enumerable && (\"key\" !== names[i] && \"ref\" !== names[i] || \"function\" !== typeof descriptor.get)) return !1;\n        }\n        return !0;\n    }\n    function objectName(object) {\n        return Object.prototype.toString.call(object).replace(/^\\[object (.*)\\]$/, function(m, p0) {\n            return p0;\n        });\n    }\n    function describeKeyForErrorMessage(key) {\n        var encodedKey = JSON.stringify(key);\n        return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n    }\n    function describeValueForErrorMessage(value) {\n        switch(typeof value){\n            case \"string\":\n                return JSON.stringify(10 >= value.length ? value : value.slice(0, 10) + \"...\");\n            case \"object\":\n                if (isArrayImpl(value)) return \"[...]\";\n                if (null !== value && value.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n                value = objectName(value);\n                return \"Object\" === value ? \"{...}\" : value;\n            case \"function\":\n                return value.$$typeof === CLIENT_REFERENCE_TAG ? \"client\" : (value = value.displayName || value.name) ? \"function \" + value : \"function\";\n            default:\n                return String(value);\n        }\n    }\n    function describeElementType(type) {\n        if (\"string\" === typeof type) return type;\n        switch(type){\n            case REACT_SUSPENSE_TYPE:\n                return \"Suspense\";\n            case REACT_SUSPENSE_LIST_TYPE:\n                return \"SuspenseList\";\n        }\n        if (\"object\" === typeof type) switch(type.$$typeof){\n            case REACT_FORWARD_REF_TYPE:\n                return describeElementType(type.render);\n            case REACT_MEMO_TYPE:\n                return describeElementType(type.type);\n            case REACT_LAZY_TYPE:\n                var payload = type._payload;\n                type = type._init;\n                try {\n                    return describeElementType(type(payload));\n                } catch (x) {}\n        }\n        return \"\";\n    }\n    function describeObjectForErrorMessage(objectOrArray, expandedName) {\n        var objKind = objectName(objectOrArray);\n        if (\"Object\" !== objKind && \"Array\" !== objKind) return objKind;\n        var start = -1, length = 0;\n        if (isArrayImpl(objectOrArray)) if (jsxChildrenParents.has(objectOrArray)) {\n            var type = jsxChildrenParents.get(objectOrArray);\n            objKind = \"<\" + describeElementType(type) + \">\";\n            for(var i = 0; i < objectOrArray.length; i++){\n                var value = objectOrArray[i];\n                value = \"string\" === typeof value ? value : \"object\" === typeof value && null !== value ? \"{\" + describeObjectForErrorMessage(value) + \"}\" : \"{\" + describeValueForErrorMessage(value) + \"}\";\n                \"\" + i === expandedName ? (start = objKind.length, length = value.length, objKind += value) : objKind = 15 > value.length && 40 > objKind.length + value.length ? objKind + value : objKind + \"{...}\";\n            }\n            objKind += \"</\" + describeElementType(type) + \">\";\n        } else {\n            objKind = \"[\";\n            for(type = 0; type < objectOrArray.length; type++)0 < type && (objKind += \", \"), i = objectOrArray[type], i = \"object\" === typeof i && null !== i ? describeObjectForErrorMessage(i) : describeValueForErrorMessage(i), \"\" + type === expandedName ? (start = objKind.length, length = i.length, objKind += i) : objKind = 10 > i.length && 40 > objKind.length + i.length ? objKind + i : objKind + \"...\";\n            objKind += \"]\";\n        }\n        else if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) objKind = \"<\" + describeElementType(objectOrArray.type) + \"/>\";\n        else {\n            if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n            if (jsxPropsParents.has(objectOrArray)) {\n                objKind = jsxPropsParents.get(objectOrArray);\n                objKind = \"<\" + (describeElementType(objKind) || \"...\");\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++){\n                    objKind += \" \";\n                    value = type[i];\n                    objKind += describeKeyForErrorMessage(value) + \"=\";\n                    var _value2 = objectOrArray[value];\n                    var _substr2 = value === expandedName && \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2);\n                    \"string\" !== typeof _value2 && (_substr2 = \"{\" + _substr2 + \"}\");\n                    value === expandedName ? (start = objKind.length, length = _substr2.length, objKind += _substr2) : objKind = 10 > _substr2.length && 40 > objKind.length + _substr2.length ? objKind + _substr2 : objKind + \"...\";\n                }\n                objKind += \">\";\n            } else {\n                objKind = \"{\";\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++)0 < i && (objKind += \", \"), value = type[i], objKind += describeKeyForErrorMessage(value) + \": \", _value2 = objectOrArray[value], _value2 = \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2), value === expandedName ? (start = objKind.length, length = _value2.length, objKind += _value2) : objKind = 10 > _value2.length && 40 > objKind.length + _value2.length ? objKind + _value2 : objKind + \"...\";\n                objKind += \"}\";\n            }\n        }\n        return void 0 === expandedName ? objKind : -1 < start && 0 < length ? (objectOrArray = \" \".repeat(start) + \"^\".repeat(length), \"\\n  \" + objKind + \"\\n  \" + objectOrArray) : \"\\n  \" + objKind;\n    }\n    function defaultFilterStackFrame(filename) {\n        return \"\" !== filename && !filename.startsWith(\"node:\") && !filename.includes(\"node_modules\");\n    }\n    function filterStackTrace(request, error, skipFrames) {\n        request = request.filterStackFrame;\n        error = parseStackTrace(error, skipFrames);\n        for(skipFrames = 0; skipFrames < error.length; skipFrames++){\n            var callsite = error[skipFrames], functionName = callsite[0], url = callsite[1];\n            if (url.startsWith(\"rsc://React/\")) {\n                var envIdx = url.indexOf(\"/\", 12), suffixIdx = url.lastIndexOf(\"?\");\n                -1 < envIdx && -1 < suffixIdx && (url = callsite[1] = url.slice(envIdx + 1, suffixIdx));\n            }\n            request(url, functionName) || (error.splice(skipFrames, 1), skipFrames--);\n        }\n        return error;\n    }\n    function patchConsole(consoleInst, methodName) {\n        var descriptor = Object.getOwnPropertyDescriptor(consoleInst, methodName);\n        if (descriptor && (descriptor.configurable || descriptor.writable) && \"function\" === typeof descriptor.value) {\n            var originalMethod = descriptor.value;\n            descriptor = Object.getOwnPropertyDescriptor(originalMethod, \"name\");\n            var wrapperMethod = function() {\n                var request = resolveRequest();\n                if ((\"assert\" !== methodName || !arguments[0]) && null !== request) {\n                    var stack = filterStackTrace(request, Error(\"react-stack-top-frame\"), 1);\n                    request.pendingChunks++;\n                    var owner = resolveOwner();\n                    emitConsoleChunk(request, methodName, owner, stack, arguments);\n                }\n                return originalMethod.apply(this, arguments);\n            };\n            descriptor && Object.defineProperty(wrapperMethod, \"name\", descriptor);\n            Object.defineProperty(consoleInst, methodName, {\n                value: wrapperMethod\n            });\n        }\n    }\n    function getCurrentStackInDEV() {\n        var owner = resolveOwner();\n        if (null === owner) return \"\";\n        try {\n            var info = \"\";\n            if (owner.owner || \"string\" !== typeof owner.name) {\n                for(; owner;){\n                    var ownerStack = owner.debugStack;\n                    if (null != ownerStack) {\n                        if (owner = owner.owner) {\n                            var JSCompiler_temp_const = info;\n                            var error = ownerStack, prevPrepareStackTrace = Error.prepareStackTrace;\n                            Error.prepareStackTrace = prepareStackTrace;\n                            var stack = error.stack;\n                            Error.prepareStackTrace = prevPrepareStackTrace;\n                            stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n                            var idx = stack.indexOf(\"\\n\");\n                            -1 !== idx && (stack = stack.slice(idx + 1));\n                            idx = stack.indexOf(\"react-stack-bottom-frame\");\n                            -1 !== idx && (idx = stack.lastIndexOf(\"\\n\", idx));\n                            var JSCompiler_inline_result = -1 !== idx ? stack = stack.slice(0, idx) : \"\";\n                            info = JSCompiler_temp_const + (\"\\n\" + JSCompiler_inline_result);\n                        }\n                    } else break;\n                }\n                var JSCompiler_inline_result$jscomp$0 = info;\n            } else {\n                JSCompiler_temp_const = owner.name;\n                if (void 0 === prefix) try {\n                    throw Error();\n                } catch (x) {\n                    prefix = (error = x.stack.trim().match(/\\n( *(at )?)/)) && error[1] || \"\", suffix = -1 < x.stack.indexOf(\"\\n    at\") ? \" (<anonymous>)\" : -1 < x.stack.indexOf(\"@\") ? \"@unknown:0:0\" : \"\";\n                }\n                JSCompiler_inline_result$jscomp$0 = \"\\n\" + prefix + JSCompiler_temp_const + suffix;\n            }\n        } catch (x) {\n            JSCompiler_inline_result$jscomp$0 = \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n        }\n        return JSCompiler_inline_result$jscomp$0;\n    }\n    function defaultErrorHandler(error) {\n        console.error(error);\n    }\n    function defaultPostponeHandler() {}\n    function RequestInstance(type, model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, onAllReady, onFatalError) {\n        if (null !== ReactSharedInternalsServer.A && ReactSharedInternalsServer.A !== DefaultAsyncDispatcher) throw Error(\"Currently React only supports one RSC renderer at a time.\");\n        ReactSharedInternalsServer.A = DefaultAsyncDispatcher;\n        ReactSharedInternalsServer.getCurrentStack = getCurrentStackInDEV;\n        var abortSet = new Set(), pingedTasks = [], hints = new Set();\n        this.type = type;\n        this.status = OPENING;\n        this.flushScheduled = !1;\n        this.destination = this.fatalError = null;\n        this.bundlerConfig = bundlerConfig;\n        this.cache = new Map();\n        this.pendingChunks = this.nextChunkId = 0;\n        this.hints = hints;\n        this.abortListeners = new Set();\n        this.abortableTasks = abortSet;\n        this.pingedTasks = pingedTasks;\n        this.completedImportChunks = [];\n        this.completedHintChunks = [];\n        this.completedRegularChunks = [];\n        this.completedErrorChunks = [];\n        this.writtenSymbols = new Map();\n        this.writtenClientReferences = new Map();\n        this.writtenServerReferences = new Map();\n        this.writtenObjects = new WeakMap();\n        this.temporaryReferences = temporaryReferences;\n        this.identifierPrefix = identifierPrefix || \"\";\n        this.identifierCount = 1;\n        this.taintCleanupQueue = [];\n        this.onError = void 0 === onError ? defaultErrorHandler : onError;\n        this.onPostpone = void 0 === onPostpone ? defaultPostponeHandler : onPostpone;\n        this.onAllReady = onAllReady;\n        this.onFatalError = onFatalError;\n        this.environmentName = void 0 === environmentName ? function() {\n            return \"Server\";\n        } : \"function\" !== typeof environmentName ? function() {\n            return environmentName;\n        } : environmentName;\n        this.filterStackFrame = void 0 === filterStackFrame ? defaultFilterStackFrame : filterStackFrame;\n        this.didWarnForKey = null;\n        type = createTask(this, model, null, !1, abortSet, null, null, null);\n        pingedTasks.push(type);\n    }\n    function noop() {}\n    function createRequest(model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame) {\n        resetOwnerStackLimit();\n        return new RequestInstance(20, model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, noop, noop);\n    }\n    function createPrerenderRequest(model, bundlerConfig, onAllReady, onFatalError, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame) {\n        resetOwnerStackLimit();\n        return new RequestInstance(PRERENDER, model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, onAllReady, onFatalError);\n    }\n    function resolveRequest() {\n        if (currentRequest) return currentRequest;\n        if (supportsRequestStorage) {\n            var store = requestStorage.getStore();\n            if (store) return store;\n        }\n        return null;\n    }\n    function serializeThenable(request, task, thenable) {\n        var newTask = createTask(request, null, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        (task = thenable._debugInfo) && forwardDebugInfo(request, newTask.id, task);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return newTask.model = thenable.value, pingTask(request, newTask), newTask.id;\n            case \"rejected\":\n                return erroredTask(request, newTask, thenable.reason), newTask.id;\n            default:\n                if (request.status === ABORTING) return request.abortableTasks.delete(newTask), newTask.status = ABORTED, task = stringify(serializeByValueID(request.fatalError)), emitModelChunk(request, newTask.id, task), newTask.id;\n                \"string\" !== typeof thenable.status && (thenable.status = \"pending\", thenable.then(function(fulfilledValue) {\n                    \"pending\" === thenable.status && (thenable.status = \"fulfilled\", thenable.value = fulfilledValue);\n                }, function(error) {\n                    \"pending\" === thenable.status && (thenable.status = \"rejected\", thenable.reason = error);\n                }));\n        }\n        thenable.then(function(value) {\n            newTask.model = value;\n            pingTask(request, newTask);\n        }, function(reason) {\n            newTask.status === PENDING$1 && (erroredTask(request, newTask, reason), enqueueFlush(request));\n        });\n        return newTask.id;\n    }\n    function serializeReadableStream(request, task, stream) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) request.abortListeners.delete(abortStream), entry = streamTask.id.toString(16) + \":C\\n\", request.completedRegularChunks.push(stringToChunk(entry)), enqueueFlush(request), aborted = !0;\n            else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), reader.read().then(progress, error);\n            } catch (x$0) {\n                error(x$0);\n            }\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortStream), erroredTask(request, streamTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortStream(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortStream), erroredTask(request, streamTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        var supportsBYOB = stream.supportsBYOB;\n        if (void 0 === supportsBYOB) try {\n            stream.getReader({\n                mode: \"byob\"\n            }).releaseLock(), supportsBYOB = !0;\n        } catch (x) {\n            supportsBYOB = !1;\n        }\n        var reader = stream.getReader(), streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        request.abortableTasks.delete(streamTask);\n        request.pendingChunks++;\n        task = streamTask.id.toString(16) + \":\" + (supportsBYOB ? \"r\" : \"R\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(task));\n        var aborted = !1;\n        request.abortListeners.add(abortStream);\n        reader.read().then(progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function serializeAsyncIterable(request, task, iterable, iterator) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) {\n                request.abortListeners.delete(abortIterable);\n                if (void 0 === entry.value) var endStreamRow = streamTask.id.toString(16) + \":C\\n\";\n                else try {\n                    var chunkId = outlineModel(request, entry.value);\n                    endStreamRow = streamTask.id.toString(16) + \":C\" + stringify(serializeByValueID(chunkId)) + \"\\n\";\n                } catch (x) {\n                    error(x);\n                    return;\n                }\n                request.completedRegularChunks.push(stringToChunk(endStreamRow));\n                enqueueFlush(request);\n                aborted = !0;\n            } else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), callIteratorInDEV(iterator, progress, error);\n            } catch (x$1) {\n                error(x$1);\n            }\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortIterable), erroredTask(request, streamTask, reason), enqueueFlush(request), \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error));\n        }\n        function abortIterable(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortIterable), erroredTask(request, streamTask, reason), enqueueFlush(request), \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error));\n        }\n        var isIterator = iterable === iterator, streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        request.abortableTasks.delete(streamTask);\n        request.pendingChunks++;\n        task = streamTask.id.toString(16) + \":\" + (isIterator ? \"x\" : \"X\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(task));\n        (iterable = iterable._debugInfo) && forwardDebugInfo(request, streamTask.id, iterable);\n        var aborted = !1;\n        request.abortListeners.add(abortIterable);\n        callIteratorInDEV(iterator, progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function emitHint(request, code, model) {\n        model = stringify(model);\n        code = stringToChunk(\":H\" + code + model + \"\\n\");\n        request.completedHintChunks.push(code);\n        enqueueFlush(request);\n    }\n    function readThenable(thenable) {\n        if (\"fulfilled\" === thenable.status) return thenable.value;\n        if (\"rejected\" === thenable.status) throw thenable.reason;\n        throw thenable;\n    }\n    function createLazyWrapperAroundWakeable(wakeable) {\n        switch(wakeable.status){\n            case \"fulfilled\":\n            case \"rejected\":\n                break;\n            default:\n                \"string\" !== typeof wakeable.status && (wakeable.status = \"pending\", wakeable.then(function(fulfilledValue) {\n                    \"pending\" === wakeable.status && (wakeable.status = \"fulfilled\", wakeable.value = fulfilledValue);\n                }, function(error) {\n                    \"pending\" === wakeable.status && (wakeable.status = \"rejected\", wakeable.reason = error);\n                }));\n        }\n        var lazyType = {\n            $$typeof: REACT_LAZY_TYPE,\n            _payload: wakeable,\n            _init: readThenable\n        };\n        lazyType._debugInfo = wakeable._debugInfo || [];\n        return lazyType;\n    }\n    function callWithDebugContextInDEV(request, task, callback, arg) {\n        var componentDebugInfo = {\n            name: \"\",\n            env: task.environmentName,\n            key: null,\n            owner: task.debugOwner\n        };\n        componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1);\n        componentDebugInfo.debugStack = task.debugStack;\n        request = componentDebugInfo.debugTask = task.debugTask;\n        currentOwner = componentDebugInfo;\n        try {\n            return request ? request.run(callback.bind(null, arg)) : callback(arg);\n        } finally{\n            currentOwner = null;\n        }\n    }\n    function processServerComponentReturnValue(request, task, Component, result) {\n        if (\"object\" !== typeof result || null === result || isClientReference(result)) return result;\n        if (\"function\" === typeof result.then) return result.then(function(resolvedValue) {\n            \"object\" === typeof resolvedValue && null !== resolvedValue && resolvedValue.$$typeof === REACT_ELEMENT_TYPE && (resolvedValue._store.validated = 1);\n        }, voidHandler), \"fulfilled\" === result.status ? result.value : createLazyWrapperAroundWakeable(result);\n        result.$$typeof === REACT_ELEMENT_TYPE && (result._store.validated = 1);\n        var iteratorFn = getIteratorFn(result);\n        if (iteratorFn) {\n            var multiShot = _defineProperty({}, Symbol.iterator, function() {\n                var iterator = iteratorFn.call(result);\n                iterator !== result || \"[object GeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object Generator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Returning an Iterator from a Server Component is not supported since it cannot be looped over more than once. \");\n                });\n                return iterator;\n            });\n            multiShot._debugInfo = result._debugInfo;\n            return multiShot;\n        }\n        return \"function\" !== typeof result[ASYNC_ITERATOR] || \"function\" === typeof ReadableStream && result instanceof ReadableStream ? result : (multiShot = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var iterator = result[ASYNC_ITERATOR]();\n            iterator !== result || \"[object AsyncGeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object AsyncGenerator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Returning an AsyncIterator from a Server Component is not supported since it cannot be looped over more than once. \");\n            });\n            return iterator;\n        }), multiShot._debugInfo = result._debugInfo, multiShot);\n    }\n    function renderFunctionComponent(request, task, key, Component, props, validated) {\n        var prevThenableState = task.thenableState;\n        task.thenableState = null;\n        if (null === debugID) return outlineTask(request, task);\n        if (null !== prevThenableState) var componentDebugInfo = prevThenableState._componentDebugInfo;\n        else {\n            var componentDebugID = debugID;\n            componentDebugInfo = Component.displayName || Component.name || \"\";\n            var componentEnv = (0, request.environmentName)();\n            request.pendingChunks++;\n            componentDebugInfo = {\n                name: componentDebugInfo,\n                env: componentEnv,\n                key: key,\n                owner: task.debugOwner\n            };\n            componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1);\n            componentDebugInfo.props = props;\n            componentDebugInfo.debugStack = task.debugStack;\n            componentDebugInfo.debugTask = task.debugTask;\n            outlineComponentInfo(request, componentDebugInfo);\n            emitDebugChunk(request, componentDebugID, componentDebugInfo);\n            task.environmentName = componentEnv;\n            2 === validated && warnForMissingKey(request, key, componentDebugInfo, task.debugTask);\n        }\n        thenableIndexCounter = 0;\n        thenableState = prevThenableState;\n        currentComponentDebugInfo = componentDebugInfo;\n        props = supportsComponentStorage ? task.debugTask ? task.debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo) : task.debugTask ? task.debugTask.run(callComponentInDEV.bind(null, Component, props, componentDebugInfo)) : callComponentInDEV(Component, props, componentDebugInfo);\n        if (request.status === ABORTING) throw \"object\" !== typeof props || null === props || \"function\" !== typeof props.then || isClientReference(props) || props.then(voidHandler, voidHandler), null;\n        props = processServerComponentReturnValue(request, task, Component, props);\n        Component = task.keyPath;\n        validated = task.implicitSlot;\n        null !== key ? task.keyPath = null === Component ? key : Component + \",\" + key : null === Component && (task.implicitSlot = !0);\n        request = renderModelDestructive(request, task, emptyRoot, \"\", props);\n        task.keyPath = Component;\n        task.implicitSlot = validated;\n        return request;\n    }\n    function warnForMissingKey(request, key, componentDebugInfo, debugTask) {\n        function logKeyError() {\n            console.error('Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.', \"\", \"\");\n        }\n        key = request.didWarnForKey;\n        null == key && (key = request.didWarnForKey = new WeakSet());\n        request = componentDebugInfo.owner;\n        if (null != request) {\n            if (key.has(request)) return;\n            key.add(request);\n        }\n        supportsComponentStorage ? debugTask ? debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo) : debugTask ? debugTask.run(callComponentInDEV.bind(null, logKeyError, null, componentDebugInfo)) : callComponentInDEV(logKeyError, null, componentDebugInfo);\n    }\n    function renderFragment(request, task, children) {\n        for(var i = 0; i < children.length; i++){\n            var child = children[i];\n            null === child || \"object\" !== typeof child || child.$$typeof !== REACT_ELEMENT_TYPE || null !== child.key || child._store.validated || (child._store.validated = 2);\n        }\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        if (i = children._debugInfo) {\n            if (null === debugID) return outlineTask(request, task);\n            forwardDebugInfo(request, debugID, i);\n            children = Array.from(children);\n        }\n        return children;\n    }\n    function renderAsyncFragment(request, task, children, getAsyncIterator) {\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        getAsyncIterator = getAsyncIterator.call(children);\n        return serializeAsyncIterable(request, task, children, getAsyncIterator);\n    }\n    function outlineTask(request, task) {\n        task = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask);\n        retryTask(request, task);\n        return task.status === COMPLETED ? serializeByValueID(task.id) : \"$L\" + task.id.toString(16);\n    }\n    function renderElement(request, task, type, key, ref, props, validated) {\n        if (null !== ref && void 0 !== ref) throw Error(\"Refs cannot be used in Server Components, nor passed to Client Components.\");\n        jsxPropsParents.set(props, type);\n        \"object\" === typeof props.children && null !== props.children && jsxChildrenParents.set(props.children, type);\n        if (\"function\" !== typeof type || isClientReference(type) || type.$$typeof === TEMPORARY_REFERENCE_TAG) {\n            if (type === REACT_FRAGMENT_TYPE && null === key) return 2 === validated && (validated = {\n                name: \"Fragment\",\n                env: (0, request.environmentName)(),\n                key: key,\n                owner: task.debugOwner,\n                stack: null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1),\n                props: props,\n                debugStack: task.debugStack,\n                debugTask: task.debugTask\n            }, warnForMissingKey(request, key, validated, task.debugTask)), validated = task.implicitSlot, null === task.keyPath && (task.implicitSlot = !0), request = renderModelDestructive(request, task, emptyRoot, \"\", props.children), task.implicitSlot = validated, request;\n            if (null != type && \"object\" === typeof type && !isClientReference(type)) switch(type.$$typeof){\n                case REACT_LAZY_TYPE:\n                    type = callLazyInitInDEV(type);\n                    if (request.status === ABORTING) throw null;\n                    return renderElement(request, task, type, key, ref, props, validated);\n                case REACT_FORWARD_REF_TYPE:\n                    return renderFunctionComponent(request, task, key, type.render, props, validated);\n                case REACT_MEMO_TYPE:\n                    return renderElement(request, task, type.type, key, ref, props, validated);\n                case REACT_ELEMENT_TYPE:\n                    type._store.validated = 1;\n            }\n        } else return renderFunctionComponent(request, task, key, type, props, validated);\n        ref = task.keyPath;\n        null === key ? key = ref : null !== ref && (key = ref + \",\" + key);\n        null !== task.debugOwner && outlineComponentInfo(request, task.debugOwner);\n        request = [\n            REACT_ELEMENT_TYPE,\n            type,\n            key,\n            props,\n            task.debugOwner,\n            null === task.debugStack ? null : filterStackTrace(request, task.debugStack, 1),\n            validated\n        ];\n        task = task.implicitSlot && null !== key ? [\n            request\n        ] : request;\n        return task;\n    }\n    function pingTask(request, task) {\n        var pingedTasks = request.pingedTasks;\n        pingedTasks.push(task);\n        1 === pingedTasks.length && (request.flushScheduled = null !== request.destination, request.type === PRERENDER || request.status === OPENING ? scheduleMicrotask(function() {\n            return performWork(request);\n        }) : setTimeoutOrImmediate(function() {\n            return performWork(request);\n        }, 0));\n    }\n    function createTask(request, model, keyPath, implicitSlot, abortSet, debugOwner, debugStack, debugTask) {\n        request.pendingChunks++;\n        var id = request.nextChunkId++;\n        \"object\" !== typeof model || null === model || null !== keyPath || implicitSlot || request.writtenObjects.set(model, serializeByValueID(id));\n        var task = {\n            id: id,\n            status: PENDING$1,\n            model: model,\n            keyPath: keyPath,\n            implicitSlot: implicitSlot,\n            ping: function() {\n                return pingTask(request, task);\n            },\n            toJSON: function(parentPropertyName, value) {\n                var parent = this, originalValue = parent[parentPropertyName];\n                \"object\" !== typeof originalValue || originalValue === value || originalValue instanceof Date || callWithDebugContextInDEV(request, task, function() {\n                    \"Object\" !== objectName(originalValue) ? \"string\" === typeof jsxChildrenParents.get(parent) ? console.error(\"%s objects cannot be rendered as text children. Try formatting it using toString().%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n                return renderModel(request, task, parent, parentPropertyName, value);\n            },\n            thenableState: null\n        };\n        task.environmentName = request.environmentName();\n        task.debugOwner = debugOwner;\n        task.debugStack = debugStack;\n        task.debugTask = debugTask;\n        abortSet.add(task);\n        return task;\n    }\n    function serializeByValueID(id) {\n        return \"$\" + id.toString(16);\n    }\n    function serializeNumber(number) {\n        return Number.isFinite(number) ? 0 === number && -Infinity === 1 / number ? \"$-0\" : number : Infinity === number ? \"$Infinity\" : -Infinity === number ? \"$-Infinity\" : \"$NaN\";\n    }\n    function encodeReferenceChunk(request, id, reference) {\n        request = stringify(reference);\n        id = id.toString(16) + \":\" + request + \"\\n\";\n        return stringToChunk(id);\n    }\n    function serializeClientReference(request, parent, parentPropertyName, clientReference) {\n        var clientReferenceKey = clientReference.$$async ? clientReference.$$id + \"#async\" : clientReference.$$id, writtenClientReferences = request.writtenClientReferences, existingId = writtenClientReferences.get(clientReferenceKey);\n        if (void 0 !== existingId) return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? \"$L\" + existingId.toString(16) : serializeByValueID(existingId);\n        try {\n            var config = request.bundlerConfig, modulePath = clientReference.$$id;\n            existingId = \"\";\n            var resolvedModuleData = config[modulePath];\n            if (resolvedModuleData) existingId = resolvedModuleData.name;\n            else {\n                var idx = modulePath.lastIndexOf(\"#\");\n                -1 !== idx && (existingId = modulePath.slice(idx + 1), resolvedModuleData = config[modulePath.slice(0, idx)]);\n                if (!resolvedModuleData) throw Error('Could not find the module \"' + modulePath + '\" in the React Client Manifest. This is probably a bug in the React Server Components bundler.');\n            }\n            if (!0 === resolvedModuleData.async && !0 === clientReference.$$async) throw Error('The module \"' + modulePath + '\" is marked as an async ESM module but was loaded as a CJS proxy. This is probably a bug in the React Server Components bundler.');\n            var clientReferenceMetadata = !0 === resolvedModuleData.async || !0 === clientReference.$$async ? [\n                resolvedModuleData.id,\n                resolvedModuleData.chunks,\n                existingId,\n                1\n            ] : [\n                resolvedModuleData.id,\n                resolvedModuleData.chunks,\n                existingId\n            ];\n            request.pendingChunks++;\n            var importId = request.nextChunkId++, json = stringify(clientReferenceMetadata), row = importId.toString(16) + \":I\" + json + \"\\n\", processedChunk = stringToChunk(row);\n            request.completedImportChunks.push(processedChunk);\n            writtenClientReferences.set(clientReferenceKey, importId);\n            return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? \"$L\" + importId.toString(16) : serializeByValueID(importId);\n        } catch (x) {\n            return request.pendingChunks++, parent = request.nextChunkId++, parentPropertyName = logRecoverableError(request, x, null), emitErrorChunk(request, parent, parentPropertyName, x), serializeByValueID(parent);\n        }\n    }\n    function outlineModel(request, value) {\n        value = createTask(request, value, null, !1, request.abortableTasks, null, null, null);\n        retryTask(request, value);\n        return value.id;\n    }\n    function serializeServerReference(request, serverReference) {\n        var writtenServerReferences = request.writtenServerReferences, existingId = writtenServerReferences.get(serverReference);\n        if (void 0 !== existingId) return \"$F\" + existingId.toString(16);\n        existingId = serverReference.$$bound;\n        existingId = null === existingId ? null : Promise.resolve(existingId);\n        var id = serverReference.$$id, location = null, error = serverReference.$$location;\n        error && (error = parseStackTrace(error, 1), 0 < error.length && (location = error[0]));\n        existingId = null !== location ? {\n            id: id,\n            bound: existingId,\n            name: \"function\" === typeof serverReference ? serverReference.name : \"\",\n            env: (0, request.environmentName)(),\n            location: location\n        } : {\n            id: id,\n            bound: existingId\n        };\n        request = outlineModel(request, existingId);\n        writtenServerReferences.set(serverReference, request);\n        return \"$F\" + request.toString(16);\n    }\n    function serializeLargeTextString(request, text) {\n        request.pendingChunks++;\n        var textId = request.nextChunkId++;\n        emitTextChunk(request, textId, text);\n        return serializeByValueID(textId);\n    }\n    function serializeMap(request, map) {\n        map = Array.from(map);\n        return \"$Q\" + outlineModel(request, map).toString(16);\n    }\n    function serializeFormData(request, formData) {\n        formData = Array.from(formData.entries());\n        return \"$K\" + outlineModel(request, formData).toString(16);\n    }\n    function serializeSet(request, set) {\n        set = Array.from(set);\n        return \"$W\" + outlineModel(request, set).toString(16);\n    }\n    function serializeTypedArray(request, tag, typedArray) {\n        request.pendingChunks++;\n        var bufferId = request.nextChunkId++;\n        emitTypedArrayChunk(request, bufferId, tag, typedArray);\n        return serializeByValueID(bufferId);\n    }\n    function serializeBlob(request, blob) {\n        function progress(entry) {\n            if (!aborted) if (entry.done) request.abortListeners.delete(abortBlob), aborted = !0, pingTask(request, newTask);\n            else return model.push(entry.value), reader.read().then(progress).catch(error);\n        }\n        function error(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortBlob), erroredTask(request, newTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortBlob(reason) {\n            aborted || (aborted = !0, request.abortListeners.delete(abortBlob), erroredTask(request, newTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        var model = [\n            blob.type\n        ], newTask = createTask(request, model, null, !1, request.abortableTasks, null, null, null), reader = blob.stream().getReader(), aborted = !1;\n        request.abortListeners.add(abortBlob);\n        reader.read().then(progress).catch(error);\n        return \"$B\" + newTask.id.toString(16);\n    }\n    function renderModel(request, task, parent, key, value) {\n        var prevKeyPath = task.keyPath, prevImplicitSlot = task.implicitSlot;\n        try {\n            return renderModelDestructive(request, task, parent, key, value);\n        } catch (thrownValue) {\n            parent = task.model;\n            parent = \"object\" === typeof parent && null !== parent && (parent.$$typeof === REACT_ELEMENT_TYPE || parent.$$typeof === REACT_LAZY_TYPE);\n            if (request.status === ABORTING) return task.status = ABORTED, task = request.fatalError, parent ? \"$L\" + task.toString(16) : serializeByValueID(task);\n            key = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n            if (\"object\" === typeof key && null !== key && \"function\" === typeof key.then) return request = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.debugOwner, task.debugStack, task.debugTask), value = request.ping, key.then(value, value), request.thenableState = getThenableStateAfterSuspending(), task.keyPath = prevKeyPath, task.implicitSlot = prevImplicitSlot, parent ? \"$L\" + request.id.toString(16) : serializeByValueID(request.id);\n            task.keyPath = prevKeyPath;\n            task.implicitSlot = prevImplicitSlot;\n            request.pendingChunks++;\n            prevKeyPath = request.nextChunkId++;\n            task = logRecoverableError(request, key, task);\n            emitErrorChunk(request, prevKeyPath, task, key);\n            return parent ? \"$L\" + prevKeyPath.toString(16) : serializeByValueID(prevKeyPath);\n        }\n    }\n    function renderModelDestructive(request, task, parent, parentPropertyName, value) {\n        task.model = value;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (null === value) return null;\n        if (\"object\" === typeof value) {\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    var elementReference = null, _writtenObjects = request.writtenObjects;\n                    if (null === task.keyPath && !task.implicitSlot) {\n                        var _existingReference = _writtenObjects.get(value);\n                        if (void 0 !== _existingReference) if (modelRoot === value) modelRoot = null;\n                        else return _existingReference;\n                        else -1 === parentPropertyName.indexOf(\":\") && (_existingReference = _writtenObjects.get(parent), void 0 !== _existingReference && (elementReference = _existingReference + \":\" + parentPropertyName, _writtenObjects.set(value, elementReference)));\n                    }\n                    if (_existingReference = value._debugInfo) {\n                        if (null === debugID) return outlineTask(request, task);\n                        forwardDebugInfo(request, debugID, _existingReference);\n                    }\n                    _existingReference = value.props;\n                    var refProp = _existingReference.ref;\n                    task.debugOwner = value._owner;\n                    task.debugStack = value._debugStack;\n                    task.debugTask = value._debugTask;\n                    request = renderElement(request, task, value.type, value.key, void 0 !== refProp ? refProp : null, _existingReference, value._store.validated);\n                    \"object\" === typeof request && null !== request && null !== elementReference && (_writtenObjects.has(request) || _writtenObjects.set(request, elementReference));\n                    return request;\n                case REACT_LAZY_TYPE:\n                    task.thenableState = null;\n                    elementReference = callLazyInitInDEV(value);\n                    if (request.status === ABORTING) throw null;\n                    if (_writtenObjects = value._debugInfo) {\n                        if (null === debugID) return outlineTask(request, task);\n                        forwardDebugInfo(request, debugID, _writtenObjects);\n                    }\n                    return renderModelDestructive(request, task, emptyRoot, \"\", elementReference);\n                case REACT_LEGACY_ELEMENT_TYPE:\n                    throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\\n- Multiple copies of the \"react\" package is used.\\n- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n- A compiler tries to \"inline\" JSX instead of using the runtime.');\n            }\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (elementReference = request.temporaryReferences.get(value), void 0 !== elementReference)) return \"$T\" + elementReference;\n            elementReference = request.writtenObjects;\n            _writtenObjects = elementReference.get(value);\n            if (\"function\" === typeof value.then) {\n                if (void 0 !== _writtenObjects) {\n                    if (null !== task.keyPath || task.implicitSlot) return \"$@\" + serializeThenable(request, task, value).toString(16);\n                    if (modelRoot === value) modelRoot = null;\n                    else return _writtenObjects;\n                }\n                request = \"$@\" + serializeThenable(request, task, value).toString(16);\n                elementReference.set(value, request);\n                return request;\n            }\n            if (void 0 !== _writtenObjects) if (modelRoot === value) modelRoot = null;\n            else return _writtenObjects;\n            else if (-1 === parentPropertyName.indexOf(\":\") && (_writtenObjects = elementReference.get(parent), void 0 !== _writtenObjects)) {\n                _existingReference = parentPropertyName;\n                if (isArrayImpl(parent) && parent[0] === REACT_ELEMENT_TYPE) switch(parentPropertyName){\n                    case \"1\":\n                        _existingReference = \"type\";\n                        break;\n                    case \"2\":\n                        _existingReference = \"key\";\n                        break;\n                    case \"3\":\n                        _existingReference = \"props\";\n                        break;\n                    case \"4\":\n                        _existingReference = \"_owner\";\n                }\n                elementReference.set(value, _writtenObjects + \":\" + _existingReference);\n            }\n            if (isArrayImpl(value)) return renderFragment(request, task, value);\n            if (value instanceof Map) return serializeMap(request, value);\n            if (value instanceof Set) return serializeSet(request, value);\n            if (\"function\" === typeof FormData && value instanceof FormData) return serializeFormData(request, value);\n            if (value instanceof Error) return serializeErrorValue(request, value);\n            if (value instanceof ArrayBuffer) return serializeTypedArray(request, \"A\", new Uint8Array(value));\n            if (value instanceof Int8Array) return serializeTypedArray(request, \"O\", value);\n            if (value instanceof Uint8Array) return serializeTypedArray(request, \"o\", value);\n            if (value instanceof Uint8ClampedArray) return serializeTypedArray(request, \"U\", value);\n            if (value instanceof Int16Array) return serializeTypedArray(request, \"S\", value);\n            if (value instanceof Uint16Array) return serializeTypedArray(request, \"s\", value);\n            if (value instanceof Int32Array) return serializeTypedArray(request, \"L\", value);\n            if (value instanceof Uint32Array) return serializeTypedArray(request, \"l\", value);\n            if (value instanceof Float32Array) return serializeTypedArray(request, \"G\", value);\n            if (value instanceof Float64Array) return serializeTypedArray(request, \"g\", value);\n            if (value instanceof BigInt64Array) return serializeTypedArray(request, \"M\", value);\n            if (value instanceof BigUint64Array) return serializeTypedArray(request, \"m\", value);\n            if (value instanceof DataView) return serializeTypedArray(request, \"V\", value);\n            if (\"function\" === typeof Blob && value instanceof Blob) return serializeBlob(request, value);\n            if (elementReference = getIteratorFn(value)) return elementReference = elementReference.call(value), elementReference === value ? \"$i\" + outlineModel(request, Array.from(elementReference)).toString(16) : renderFragment(request, task, Array.from(elementReference));\n            if (\"function\" === typeof ReadableStream && value instanceof ReadableStream) return serializeReadableStream(request, task, value);\n            elementReference = value[ASYNC_ITERATOR];\n            if (\"function\" === typeof elementReference) return renderAsyncFragment(request, task, value, elementReference);\n            if (value instanceof Date) return \"$D\" + value.toJSON();\n            elementReference = getPrototypeOf(value);\n            if (elementReference !== ObjectPrototype && (null === elementReference || null !== getPrototypeOf(elementReference))) throw Error(\"Only plain objects, and a few built-ins, can be passed to Client Components from Server Components. Classes or null prototypes are not supported.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            if (\"Object\" !== objectName(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(value), describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (!isSimpleObject(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. Classes or other objects with methods are not supported.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (Object.getOwnPropertySymbols) {\n                var symbols = Object.getOwnPropertySymbols(value);\n                0 < symbols.length && callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with symbol properties like %s are not supported.%s\", symbols[0].description, describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n            }\n            return value;\n        }\n        if (\"string\" === typeof value) return \"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date ? \"$D\" + value : 1024 <= value.length && null !== byteLengthOfChunk ? serializeLargeTextString(request, value) : \"$\" === value[0] ? \"$\" + value : value;\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) {\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (value.$$typeof === SERVER_REFERENCE_TAG) return serializeServerReference(request, value);\n            if (void 0 !== request.temporaryReferences && (request = request.temporaryReferences.get(value), void 0 !== request)) return \"$T\" + request;\n            if (value.$$typeof === TEMPORARY_REFERENCE_TAG) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n            if (/^on[A-Z]/.test(parentPropertyName)) throw Error(\"Event handlers cannot be passed to Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName) + \"\\nIf you need interactivity, consider converting part of this to a Client Component.\");\n            if (jsxChildrenParents.has(parent) || jsxPropsParents.has(parent) && \"children\" === parentPropertyName) throw request = value.displayName || value.name || \"Component\", Error(\"Functions are not valid as a child of Client Components. This may happen if you return \" + request + \" instead of <\" + request + \" /> from render. Or maybe you meant to call this function rather than return it.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            throw Error('Functions cannot be passed directly to Client Components unless you explicitly expose it by marking it with \"use server\". Or maybe you meant to call this function rather than return it.' + describeObjectForErrorMessage(parent, parentPropertyName));\n        }\n        if (\"symbol\" === typeof value) {\n            task = request.writtenSymbols;\n            elementReference = task.get(value);\n            if (void 0 !== elementReference) return serializeByValueID(elementReference);\n            elementReference = value.description;\n            if (Symbol.for(elementReference) !== value) throw Error(\"Only global symbols received from Symbol.for(...) can be passed to Client Components. The symbol Symbol.for(\" + (value.description + \") cannot be found among global symbols.\") + describeObjectForErrorMessage(parent, parentPropertyName));\n            request.pendingChunks++;\n            _writtenObjects = request.nextChunkId++;\n            emitSymbolChunk(request, _writtenObjects, elementReference);\n            task.set(value, _writtenObjects);\n            return serializeByValueID(_writtenObjects);\n        }\n        if (\"bigint\" === typeof value) return \"$n\" + value.toString(10);\n        throw Error(\"Type \" + typeof value + \" is not supported in Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n    }\n    function logRecoverableError(request, error, task) {\n        var prevRequest = currentRequest;\n        currentRequest = null;\n        try {\n            var onError = request.onError;\n            var errorDigest = null !== task ? supportsRequestStorage ? requestStorage.run(void 0, callWithDebugContextInDEV, request, task, onError, error) : callWithDebugContextInDEV(request, task, onError, error) : supportsRequestStorage ? requestStorage.run(void 0, onError, error) : onError(error);\n        } finally{\n            currentRequest = prevRequest;\n        }\n        if (null != errorDigest && \"string\" !== typeof errorDigest) throw Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n        return errorDigest || \"\";\n    }\n    function fatalError(request, error) {\n        var onFatalError = request.onFatalError;\n        onFatalError(error);\n        null !== request.destination ? (request.status = CLOSED, closeWithError(request.destination, error)) : (request.status = CLOSING, request.fatalError = error);\n    }\n    function serializeErrorValue(request, error) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            name = error.name;\n            var message = String(error.message);\n            var stack = filterStackTrace(request, error, 0);\n            var errorEnv = error.environmentName;\n            \"string\" === typeof errorEnv && (env = errorEnv);\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        return \"$Z\" + outlineModel(request, {\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        }).toString(16);\n    }\n    function emitErrorChunk(request, id, digest, error) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            if (error instanceof Error) {\n                name = error.name;\n                var message = String(error.message);\n                var stack = filterStackTrace(request, error, 0);\n                var errorEnv = error.environmentName;\n                \"string\" === typeof errorEnv && (env = errorEnv);\n            } else message = \"object\" === typeof error && null !== error ? describeObjectForErrorMessage(error) : String(error), stack = [];\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        digest = {\n            digest: digest,\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        };\n        id = id.toString(16) + \":E\" + stringify(digest) + \"\\n\";\n        id = stringToChunk(id);\n        request.completedErrorChunks.push(id);\n    }\n    function emitSymbolChunk(request, id, name) {\n        id = encodeReferenceChunk(request, id, \"$S\" + name);\n        request.completedImportChunks.push(id);\n    }\n    function emitModelChunk(request, id, json) {\n        id = id.toString(16) + \":\" + json + \"\\n\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id);\n    }\n    function emitDebugChunk(request, id, debugInfo) {\n        var counter = {\n            objectLimit: 500\n        };\n        debugInfo = stringify(debugInfo, function(parentPropertyName, value) {\n            return renderConsoleValue(request, counter, this, parentPropertyName, value);\n        });\n        id = id.toString(16) + \":D\" + debugInfo + \"\\n\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id);\n    }\n    function outlineComponentInfo(request, componentInfo) {\n        if (!request.writtenObjects.has(componentInfo)) {\n            null != componentInfo.owner && outlineComponentInfo(request, componentInfo.owner);\n            var objectLimit = 10;\n            null != componentInfo.stack && (objectLimit += componentInfo.stack.length);\n            objectLimit = {\n                objectLimit: objectLimit\n            };\n            var componentDebugInfo = {\n                name: componentInfo.name,\n                env: componentInfo.env,\n                key: componentInfo.key,\n                owner: componentInfo.owner\n            };\n            componentDebugInfo.stack = componentInfo.stack;\n            componentDebugInfo.props = componentInfo.props;\n            objectLimit = outlineConsoleValue(request, objectLimit, componentDebugInfo);\n            request.writtenObjects.set(componentInfo, serializeByValueID(objectLimit));\n        }\n    }\n    function emitTypedArrayChunk(request, id, tag, typedArray) {\n        request.pendingChunks++;\n        var buffer = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n        typedArray = 2048 < typedArray.byteLength ? buffer.slice() : buffer;\n        buffer = typedArray.byteLength;\n        id = id.toString(16) + \":\" + tag + buffer.toString(16) + \",\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id, typedArray);\n    }\n    function emitTextChunk(request, id, text) {\n        if (null === byteLengthOfChunk) throw Error(\"Existence of byteLengthOfChunk should have already been checked. This is a bug in React.\");\n        request.pendingChunks++;\n        text = stringToChunk(text);\n        var binaryLength = text.byteLength;\n        id = id.toString(16) + \":T\" + binaryLength.toString(16) + \",\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id, text);\n    }\n    function renderConsoleValue(request, counter, parent, parentPropertyName, value) {\n        if (null === value) return null;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (\"object\" === typeof value) {\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (parent = request.temporaryReferences.get(value), void 0 !== parent)) return \"$T\" + parent;\n            parent = request.writtenObjects.get(value);\n            if (void 0 !== parent) return parent;\n            if (0 >= counter.objectLimit && !doNotLimit.has(value)) return \"$Y\";\n            counter.objectLimit--;\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    null != value._owner && outlineComponentInfo(request, value._owner);\n                    \"object\" === typeof value.type && null !== value.type && doNotLimit.add(value.type);\n                    \"object\" === typeof value.key && null !== value.key && doNotLimit.add(value.key);\n                    doNotLimit.add(value.props);\n                    null !== value._owner && doNotLimit.add(value._owner);\n                    counter = null;\n                    if (null != value._debugStack) for(counter = filterStackTrace(request, value._debugStack, 1), doNotLimit.add(counter), request = 0; request < counter.length; request++)doNotLimit.add(counter[request]);\n                    return [\n                        REACT_ELEMENT_TYPE,\n                        value.type,\n                        value.key,\n                        value.props,\n                        value._owner,\n                        counter,\n                        value._store.validated\n                    ];\n            }\n            if (\"function\" === typeof value.then) {\n                switch(value.status){\n                    case \"fulfilled\":\n                        return \"$@\" + outlineConsoleValue(request, counter, value.value).toString(16);\n                    case \"rejected\":\n                        return counter = value.reason, request.pendingChunks++, value = request.nextChunkId++, emitErrorChunk(request, value, \"\", counter), \"$@\" + value.toString(16);\n                }\n                return \"$@\";\n            }\n            if (isArrayImpl(value)) return value;\n            if (value instanceof Map) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(parent = 0; parent < value.length; parent++){\n                    var entry = value[parent];\n                    doNotLimit.add(entry);\n                    parentPropertyName = entry[0];\n                    entry = entry[1];\n                    \"object\" === typeof parentPropertyName && null !== parentPropertyName && doNotLimit.add(parentPropertyName);\n                    \"object\" === typeof entry && null !== entry && doNotLimit.add(entry);\n                }\n                return \"$Q\" + outlineConsoleValue(request, counter, value).toString(16);\n            }\n            if (value instanceof Set) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(parent = 0; parent < value.length; parent++)parentPropertyName = value[parent], \"object\" === typeof parentPropertyName && null !== parentPropertyName && doNotLimit.add(parentPropertyName);\n                return \"$W\" + outlineConsoleValue(request, counter, value).toString(16);\n            }\n            return \"function\" === typeof FormData && value instanceof FormData ? serializeFormData(request, value) : value instanceof Error ? serializeErrorValue(request, value) : value instanceof ArrayBuffer ? serializeTypedArray(request, \"A\", new Uint8Array(value)) : value instanceof Int8Array ? serializeTypedArray(request, \"O\", value) : value instanceof Uint8Array ? serializeTypedArray(request, \"o\", value) : value instanceof Uint8ClampedArray ? serializeTypedArray(request, \"U\", value) : value instanceof Int16Array ? serializeTypedArray(request, \"S\", value) : value instanceof Uint16Array ? serializeTypedArray(request, \"s\", value) : value instanceof Int32Array ? serializeTypedArray(request, \"L\", value) : value instanceof Uint32Array ? serializeTypedArray(request, \"l\", value) : value instanceof Float32Array ? serializeTypedArray(request, \"G\", value) : value instanceof Float64Array ? serializeTypedArray(request, \"g\", value) : value instanceof BigInt64Array ? serializeTypedArray(request, \"M\", value) : value instanceof BigUint64Array ? serializeTypedArray(request, \"m\", value) : value instanceof DataView ? serializeTypedArray(request, \"V\", value) : \"function\" === typeof Blob && value instanceof Blob ? serializeBlob(request, value) : getIteratorFn(value) ? Array.from(value) : value;\n        }\n        if (\"string\" === typeof value) return \"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date ? \"$D\" + value : 1024 <= value.length ? serializeLargeTextString(request, value) : \"$\" === value[0] ? \"$\" + value : value;\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) return isClientReference(value) ? serializeClientReference(request, parent, parentPropertyName, value) : void 0 !== request.temporaryReferences && (request = request.temporaryReferences.get(value), void 0 !== request) ? \"$T\" + request : \"$E(\" + (Function.prototype.toString.call(value) + \")\");\n        if (\"symbol\" === typeof value) {\n            counter = request.writtenSymbols.get(value);\n            if (void 0 !== counter) return serializeByValueID(counter);\n            counter = value.description;\n            request.pendingChunks++;\n            value = request.nextChunkId++;\n            emitSymbolChunk(request, value, counter);\n            return serializeByValueID(value);\n        }\n        return \"bigint\" === typeof value ? \"$n\" + value.toString(10) : value instanceof Date ? \"$D\" + value.toJSON() : \"unknown type \" + typeof value;\n    }\n    function outlineConsoleValue(request, counter, model) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderConsoleValue(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        \"object\" === typeof model && null !== model && doNotLimit.add(model);\n        try {\n            var json = stringify(model, replacer);\n        } catch (x) {\n            json = stringify(\"Unknown Value: React could not send it from the server.\\n\" + x.message);\n        }\n        request.pendingChunks++;\n        model = request.nextChunkId++;\n        json = model.toString(16) + \":\" + json + \"\\n\";\n        json = stringToChunk(json);\n        request.completedRegularChunks.push(json);\n        return model;\n    }\n    function emitConsoleChunk(request, methodName, owner, stackTrace, args) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderConsoleValue(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        var counter = {\n            objectLimit: 500\n        };\n        null != owner && outlineComponentInfo(request, owner);\n        var env = (0, request.environmentName)(), payload = [\n            methodName,\n            stackTrace,\n            owner,\n            env\n        ];\n        payload.push.apply(payload, args);\n        try {\n            var json = stringify(payload, replacer);\n        } catch (x) {\n            json = stringify([\n                methodName,\n                stackTrace,\n                owner,\n                env,\n                \"Unknown Value: React could not send it from the server.\",\n                x\n            ], replacer);\n        }\n        methodName = stringToChunk(\":W\" + json + \"\\n\");\n        request.completedRegularChunks.push(methodName);\n    }\n    function forwardDebugInfo(request, id, debugInfo) {\n        for(var i = 0; i < debugInfo.length; i++)\"number\" !== typeof debugInfo[i].time && (request.pendingChunks++, \"string\" === typeof debugInfo[i].name && outlineComponentInfo(request, debugInfo[i]), emitDebugChunk(request, id, debugInfo[i]));\n    }\n    function emitChunk(request, task, value) {\n        var id = task.id;\n        \"string\" === typeof value && null !== byteLengthOfChunk ? emitTextChunk(request, id, value) : value instanceof ArrayBuffer ? emitTypedArrayChunk(request, id, \"A\", new Uint8Array(value)) : value instanceof Int8Array ? emitTypedArrayChunk(request, id, \"O\", value) : value instanceof Uint8Array ? emitTypedArrayChunk(request, id, \"o\", value) : value instanceof Uint8ClampedArray ? emitTypedArrayChunk(request, id, \"U\", value) : value instanceof Int16Array ? emitTypedArrayChunk(request, id, \"S\", value) : value instanceof Uint16Array ? emitTypedArrayChunk(request, id, \"s\", value) : value instanceof Int32Array ? emitTypedArrayChunk(request, id, \"L\", value) : value instanceof Uint32Array ? emitTypedArrayChunk(request, id, \"l\", value) : value instanceof Float32Array ? emitTypedArrayChunk(request, id, \"G\", value) : value instanceof Float64Array ? emitTypedArrayChunk(request, id, \"g\", value) : value instanceof BigInt64Array ? emitTypedArrayChunk(request, id, \"M\", value) : value instanceof BigUint64Array ? emitTypedArrayChunk(request, id, \"m\", value) : value instanceof DataView ? emitTypedArrayChunk(request, id, \"V\", value) : (value = stringify(value, task.toJSON), emitModelChunk(request, task.id, value));\n    }\n    function erroredTask(request, task, error) {\n        request.abortableTasks.delete(task);\n        task.status = ERRORED$1;\n        var digest = logRecoverableError(request, error, task);\n        emitErrorChunk(request, task.id, digest, error);\n    }\n    function retryTask(request, task) {\n        if (task.status === PENDING$1) {\n            var prevDebugID = debugID;\n            task.status = RENDERING;\n            try {\n                modelRoot = task.model;\n                debugID = task.id;\n                var resolvedModel = renderModelDestructive(request, task, emptyRoot, \"\", task.model);\n                debugID = null;\n                modelRoot = resolvedModel;\n                task.keyPath = null;\n                task.implicitSlot = !1;\n                var currentEnv = (0, request.environmentName)();\n                currentEnv !== task.environmentName && (request.pendingChunks++, emitDebugChunk(request, task.id, {\n                    env: currentEnv\n                }));\n                if (\"object\" === typeof resolvedModel && null !== resolvedModel) request.writtenObjects.set(resolvedModel, serializeByValueID(task.id)), emitChunk(request, task, resolvedModel);\n                else {\n                    var json = stringify(resolvedModel);\n                    emitModelChunk(request, task.id, json);\n                }\n                request.abortableTasks.delete(task);\n                task.status = COMPLETED;\n            } catch (thrownValue) {\n                if (request.status === ABORTING) {\n                    request.abortableTasks.delete(task);\n                    task.status = ABORTED;\n                    var model = stringify(serializeByValueID(request.fatalError));\n                    emitModelChunk(request, task.id, model);\n                } else {\n                    var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n                    if (\"object\" === typeof x && null !== x && \"function\" === typeof x.then) {\n                        task.status = PENDING$1;\n                        task.thenableState = getThenableStateAfterSuspending();\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                    } else erroredTask(request, task, x);\n                }\n            } finally{\n                debugID = prevDebugID;\n            }\n        }\n    }\n    function tryStreamTask(request, task) {\n        var prevDebugID = debugID;\n        debugID = null;\n        try {\n            emitChunk(request, task, task.model);\n        } finally{\n            debugID = prevDebugID;\n        }\n    }\n    function performWork(request) {\n        var prevDispatcher = ReactSharedInternalsServer.H;\n        ReactSharedInternalsServer.H = HooksDispatcher;\n        var prevRequest = currentRequest;\n        currentRequest$1 = currentRequest = request;\n        var hadAbortableTasks = 0 < request.abortableTasks.size;\n        try {\n            var pingedTasks = request.pingedTasks;\n            request.pingedTasks = [];\n            for(var i = 0; i < pingedTasks.length; i++)retryTask(request, pingedTasks[i]);\n            null !== request.destination && flushCompletedChunks(request, request.destination);\n            if (hadAbortableTasks && 0 === request.abortableTasks.size) {\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        } catch (error) {\n            logRecoverableError(request, error, null), fatalError(request, error);\n        } finally{\n            ReactSharedInternalsServer.H = prevDispatcher, currentRequest$1 = null, currentRequest = prevRequest;\n        }\n    }\n    function flushCompletedChunks(request, destination) {\n        currentView = new Uint8Array(2048);\n        writtenBytes = 0;\n        try {\n            for(var importsChunks = request.completedImportChunks, i = 0; i < importsChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, importsChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            importsChunks.splice(0, i);\n            var hintChunks = request.completedHintChunks;\n            for(i = 0; i < hintChunks.length; i++)if (!writeChunkAndReturn(destination, hintChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            hintChunks.splice(0, i);\n            var regularChunks = request.completedRegularChunks;\n            for(i = 0; i < regularChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, regularChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            regularChunks.splice(0, i);\n            var errorChunks = request.completedErrorChunks;\n            for(i = 0; i < errorChunks.length; i++)if (request.pendingChunks--, !writeChunkAndReturn(destination, errorChunks[i])) {\n                request.destination = null;\n                i++;\n                break;\n            }\n            errorChunks.splice(0, i);\n        } finally{\n            request.flushScheduled = !1, currentView && 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);\n        }\n        0 === request.pendingChunks && (request.status = CLOSED, destination.close(), request.destination = null);\n    }\n    function startWork(request) {\n        request.flushScheduled = null !== request.destination;\n        supportsRequestStorage ? scheduleMicrotask(function() {\n            requestStorage.run(request, performWork, request);\n        }) : scheduleMicrotask(function() {\n            return performWork(request);\n        });\n        setTimeoutOrImmediate(function() {\n            request.status === OPENING && (request.status = 11);\n        }, 0);\n    }\n    function enqueueFlush(request) {\n        !1 === request.flushScheduled && 0 === request.pingedTasks.length && null !== request.destination && (request.flushScheduled = !0, setTimeoutOrImmediate(function() {\n            request.flushScheduled = !1;\n            var destination = request.destination;\n            destination && flushCompletedChunks(request, destination);\n        }, 0));\n    }\n    function startFlowing(request, destination) {\n        if (request.status === CLOSING) request.status = CLOSED, closeWithError(destination, request.fatalError);\n        else if (request.status !== CLOSED && null === request.destination) {\n            request.destination = destination;\n            try {\n                flushCompletedChunks(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error, null), fatalError(request, error);\n            }\n        }\n    }\n    function abort(request, reason) {\n        try {\n            11 >= request.status && (request.status = ABORTING);\n            var abortableTasks = request.abortableTasks;\n            if (0 < abortableTasks.size) {\n                var error = void 0 === reason ? Error(\"The render was aborted by the server without a reason.\") : \"object\" === typeof reason && null !== reason && \"function\" === typeof reason.then ? Error(\"The render was aborted by the server with a promise.\") : reason, digest = logRecoverableError(request, error, null), _errorId2 = request.nextChunkId++;\n                request.fatalError = _errorId2;\n                request.pendingChunks++;\n                emitErrorChunk(request, _errorId2, digest, error);\n                abortableTasks.forEach(function(task) {\n                    if (task.status !== RENDERING) {\n                        task.status = ABORTED;\n                        var ref = serializeByValueID(_errorId2);\n                        task = encodeReferenceChunk(request, task.id, ref);\n                        request.completedErrorChunks.push(task);\n                    }\n                });\n                abortableTasks.clear();\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n            var abortListeners = request.abortListeners;\n            if (0 < abortListeners.size) {\n                var _error = void 0 === reason ? Error(\"The render was aborted by the server without a reason.\") : \"object\" === typeof reason && null !== reason && \"function\" === typeof reason.then ? Error(\"The render was aborted by the server with a promise.\") : reason;\n                abortListeners.forEach(function(callback) {\n                    return callback(_error);\n                });\n                abortListeners.clear();\n            }\n            null !== request.destination && flushCompletedChunks(request, request.destination);\n        } catch (error$2) {\n            logRecoverableError(request, error$2, null), fatalError(request, error$2);\n        }\n    }\n    function resolveServerReference(bundlerConfig, id) {\n        var name = \"\", resolvedModuleData = bundlerConfig[id];\n        if (resolvedModuleData) name = resolvedModuleData.name;\n        else {\n            var idx = id.lastIndexOf(\"#\");\n            -1 !== idx && (name = id.slice(idx + 1), resolvedModuleData = bundlerConfig[id.slice(0, idx)]);\n            if (!resolvedModuleData) throw Error('Could not find the module \"' + id + '\" in the React Server Manifest. This is probably a bug in the React Server Components bundler.');\n        }\n        return resolvedModuleData.async ? [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name,\n            1\n        ] : [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name\n        ];\n    }\n    function requireAsyncModule(id) {\n        var promise = globalThis.__next_require__(id);\n        if (\"function\" !== typeof promise.then || \"fulfilled\" === promise.status) return null;\n        promise.then(function(value) {\n            promise.status = \"fulfilled\";\n            promise.value = value;\n        }, function(reason) {\n            promise.status = \"rejected\";\n            promise.reason = reason;\n        });\n        return promise;\n    }\n    function ignoreReject() {}\n    function preloadModule(metadata) {\n        for(var chunks = metadata[1], promises = [], i = 0; i < chunks.length;){\n            var chunkId = chunks[i++];\n            chunks[i++];\n            var entry = chunkCache.get(chunkId);\n            if (void 0 === entry) {\n                entry = __webpack_require__.e(chunkId);\n                promises.push(entry);\n                var resolve = chunkCache.set.bind(chunkCache, chunkId, null);\n                entry.then(resolve, ignoreReject);\n                chunkCache.set(chunkId, entry);\n            } else null !== entry && promises.push(entry);\n        }\n        return 4 === metadata.length ? 0 === promises.length ? requireAsyncModule(metadata[0]) : Promise.all(promises).then(function() {\n            return requireAsyncModule(metadata[0]);\n        }) : 0 < promises.length ? Promise.all(promises) : null;\n    }\n    function requireModule(metadata) {\n        var moduleExports = globalThis.__next_require__(metadata[0]);\n        if (4 === metadata.length && \"function\" === typeof moduleExports.then) if (\"fulfilled\" === moduleExports.status) moduleExports = moduleExports.value;\n        else throw moduleExports.reason;\n        return \"*\" === metadata[2] ? moduleExports : \"\" === metadata[2] ? moduleExports.__esModule ? moduleExports.default : moduleExports : moduleExports[metadata[2]];\n    }\n    function Chunk(status, value, reason, response) {\n        this.status = status;\n        this.value = value;\n        this.reason = reason;\n        this._response = response;\n    }\n    function createPendingChunk(response) {\n        return new Chunk(\"pending\", null, null, response);\n    }\n    function wakeChunk(listeners, value) {\n        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(value);\n    }\n    function triggerErrorOnChunk(chunk, error) {\n        if (\"pending\" !== chunk.status && \"blocked\" !== chunk.status) chunk.reason.error(error);\n        else {\n            var listeners = chunk.reason;\n            chunk.status = \"rejected\";\n            chunk.reason = error;\n            null !== listeners && wakeChunk(listeners, error);\n        }\n    }\n    function resolveModelChunk(chunk, value, id) {\n        if (\"pending\" !== chunk.status) chunk = chunk.reason, \"C\" === value[0] ? chunk.close(\"C\" === value ? '\"$undefined\"' : value.slice(1)) : chunk.enqueueModel(value);\n        else {\n            var resolveListeners = chunk.value, rejectListeners = chunk.reason;\n            chunk.status = \"resolved_model\";\n            chunk.value = value;\n            chunk.reason = id;\n            if (null !== resolveListeners) switch(initializeModelChunk(chunk), chunk.status){\n                case \"fulfilled\":\n                    wakeChunk(resolveListeners, chunk.value);\n                    break;\n                case \"pending\":\n                case \"blocked\":\n                case \"cyclic\":\n                    if (chunk.value) for(value = 0; value < resolveListeners.length; value++)chunk.value.push(resolveListeners[value]);\n                    else chunk.value = resolveListeners;\n                    if (chunk.reason) {\n                        if (rejectListeners) for(value = 0; value < rejectListeners.length; value++)chunk.reason.push(rejectListeners[value]);\n                    } else chunk.reason = rejectListeners;\n                    break;\n                case \"rejected\":\n                    rejectListeners && wakeChunk(rejectListeners, chunk.reason);\n            }\n        }\n    }\n    function createResolvedIteratorResultChunk(response, value, done) {\n        return new Chunk(\"resolved_model\", (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1, response);\n    }\n    function resolveIteratorResultChunk(chunk, value, done) {\n        resolveModelChunk(chunk, (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1);\n    }\n    function loadServerReference$1(response, id, bound, parentChunk, parentObject, key) {\n        var serverReference = resolveServerReference(response._bundlerConfig, id);\n        id = preloadModule(serverReference);\n        if (bound) bound = Promise.all([\n            bound,\n            id\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        });\n        else if (id) bound = Promise.resolve(id).then(function() {\n            return requireModule(serverReference);\n        });\n        else return requireModule(serverReference);\n        bound.then(createModelResolver(parentChunk, parentObject, key, !1, response, createModel, []), createModelReject(parentChunk));\n        return null;\n    }\n    function reviveModel(response, parentObj, parentKey, value, reference) {\n        if (\"string\" === typeof value) return parseModelString(response, parentObj, parentKey, value, reference);\n        if (\"object\" === typeof value && null !== value) if (void 0 !== reference && void 0 !== response._temporaryReferences && response._temporaryReferences.set(value, reference), Array.isArray(value)) for(var i = 0; i < value.length; i++)value[i] = reviveModel(response, value, \"\" + i, value[i], void 0 !== reference ? reference + \":\" + i : void 0);\n        else for(i in value)hasOwnProperty.call(value, i) && (parentObj = void 0 !== reference && -1 === i.indexOf(\":\") ? reference + \":\" + i : void 0, parentObj = reviveModel(response, value, i, value[i], parentObj), void 0 !== parentObj ? value[i] = parentObj : delete value[i]);\n        return value;\n    }\n    function initializeModelChunk(chunk) {\n        var prevChunk = initializingChunk, prevBlocked = initializingChunkBlockedModel;\n        initializingChunk = chunk;\n        initializingChunkBlockedModel = null;\n        var rootReference = -1 === chunk.reason ? void 0 : chunk.reason.toString(16), resolvedModel = chunk.value;\n        chunk.status = \"cyclic\";\n        chunk.value = null;\n        chunk.reason = null;\n        try {\n            var rawModel = JSON.parse(resolvedModel), value = reviveModel(chunk._response, {\n                \"\": rawModel\n            }, \"\", rawModel, rootReference);\n            if (null !== initializingChunkBlockedModel && 0 < initializingChunkBlockedModel.deps) initializingChunkBlockedModel.value = value, chunk.status = \"blocked\";\n            else {\n                var resolveListeners = chunk.value;\n                chunk.status = \"fulfilled\";\n                chunk.value = value;\n                null !== resolveListeners && wakeChunk(resolveListeners, value);\n            }\n        } catch (error) {\n            chunk.status = \"rejected\", chunk.reason = error;\n        } finally{\n            initializingChunk = prevChunk, initializingChunkBlockedModel = prevBlocked;\n        }\n    }\n    function reportGlobalError(response, error) {\n        response._closed = !0;\n        response._closedReason = error;\n        response._chunks.forEach(function(chunk) {\n            \"pending\" === chunk.status && triggerErrorOnChunk(chunk, error);\n        });\n    }\n    function getChunk(response, id) {\n        var chunks = response._chunks, chunk = chunks.get(id);\n        chunk || (chunk = response._formData.get(response._prefix + id), chunk = null != chunk ? new Chunk(\"resolved_model\", chunk, id, response) : response._closed ? new Chunk(\"rejected\", null, response._closedReason, response) : createPendingChunk(response), chunks.set(id, chunk));\n        return chunk;\n    }\n    function createModelResolver(chunk, parentObject, key, cyclic, response, map, path) {\n        if (initializingChunkBlockedModel) {\n            var blocked = initializingChunkBlockedModel;\n            cyclic || blocked.deps++;\n        } else blocked = initializingChunkBlockedModel = {\n            deps: cyclic ? 0 : 1,\n            value: null\n        };\n        return function(value) {\n            for(var i = 1; i < path.length; i++)value = value[path[i]];\n            parentObject[key] = map(response, value);\n            \"\" === key && null === blocked.value && (blocked.value = parentObject[key]);\n            blocked.deps--;\n            0 === blocked.deps && \"blocked\" === chunk.status && (value = chunk.value, chunk.status = \"fulfilled\", chunk.value = blocked.value, null !== value && wakeChunk(value, blocked.value));\n        };\n    }\n    function createModelReject(chunk) {\n        return function(error) {\n            return triggerErrorOnChunk(chunk, error);\n        };\n    }\n    function getOutlinedModel(response, reference, parentObject, key, map) {\n        reference = reference.split(\":\");\n        var id = parseInt(reference[0], 16);\n        id = getChunk(response, id);\n        switch(id.status){\n            case \"resolved_model\":\n                initializeModelChunk(id);\n        }\n        switch(id.status){\n            case \"fulfilled\":\n                parentObject = id.value;\n                for(key = 1; key < reference.length; key++)parentObject = parentObject[reference[key]];\n                return map(response, parentObject);\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                var parentChunk = initializingChunk;\n                id.then(createModelResolver(parentChunk, parentObject, key, \"cyclic\" === id.status, response, map, reference), createModelReject(parentChunk));\n                return null;\n            default:\n                throw id.reason;\n        }\n    }\n    function createMap(response, model) {\n        return new Map(model);\n    }\n    function createSet(response, model) {\n        return new Set(model);\n    }\n    function extractIterator(response, model) {\n        return model[Symbol.iterator]();\n    }\n    function createModel(response, model) {\n        return model;\n    }\n    function parseTypedArray(response, reference, constructor, bytesPerElement, parentObject, parentKey) {\n        reference = parseInt(reference.slice(2), 16);\n        reference = response._formData.get(response._prefix + reference);\n        reference = constructor === ArrayBuffer ? reference.arrayBuffer() : reference.arrayBuffer().then(function(buffer) {\n            return new constructor(buffer);\n        });\n        bytesPerElement = initializingChunk;\n        reference.then(createModelResolver(bytesPerElement, parentObject, parentKey, !1, response, createModel, []), createModelReject(bytesPerElement));\n        return null;\n    }\n    function resolveStream(response, id, stream, controller) {\n        var chunks = response._chunks;\n        stream = new Chunk(\"fulfilled\", stream, controller, response);\n        chunks.set(id, stream);\n        response = response._formData.getAll(response._prefix + id);\n        for(id = 0; id < response.length; id++)chunks = response[id], \"C\" === chunks[0] ? controller.close(\"C\" === chunks ? '\"$undefined\"' : chunks.slice(1)) : controller.enqueueModel(chunks);\n    }\n    function parseReadableStream(response, reference, type) {\n        reference = parseInt(reference.slice(2), 16);\n        var controller = null;\n        type = new ReadableStream({\n            type: type,\n            start: function(c) {\n                controller = c;\n            }\n        });\n        var previousBlockedChunk = null;\n        resolveStream(response, reference, type, {\n            enqueueModel: function(json) {\n                if (null === previousBlockedChunk) {\n                    var chunk = new Chunk(\"resolved_model\", json, -1, response);\n                    initializeModelChunk(chunk);\n                    \"fulfilled\" === chunk.status ? controller.enqueue(chunk.value) : (chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    }), previousBlockedChunk = chunk);\n                } else {\n                    chunk = previousBlockedChunk;\n                    var _chunk = createPendingChunk(response);\n                    _chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    });\n                    previousBlockedChunk = _chunk;\n                    chunk.then(function() {\n                        previousBlockedChunk === _chunk && (previousBlockedChunk = null);\n                        resolveModelChunk(_chunk, json, -1);\n                    });\n                }\n            },\n            close: function() {\n                if (null === previousBlockedChunk) controller.close();\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.close();\n                    });\n                }\n            },\n            error: function(error) {\n                if (null === previousBlockedChunk) controller.error(error);\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.error(error);\n                    });\n                }\n            }\n        });\n        return type;\n    }\n    function asyncIterator() {\n        return this;\n    }\n    function createIterator(next) {\n        next = {\n            next: next\n        };\n        next[ASYNC_ITERATOR] = asyncIterator;\n        return next;\n    }\n    function parseAsyncIterable(response, reference, iterator) {\n        reference = parseInt(reference.slice(2), 16);\n        var buffer = [], closed = !1, nextWriteIndex = 0, iterable = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var nextReadIndex = 0;\n            return createIterator(function(arg) {\n                if (void 0 !== arg) throw Error(\"Values cannot be passed to next() of AsyncIterables passed to Client Components.\");\n                if (nextReadIndex === buffer.length) {\n                    if (closed) return new Chunk(\"fulfilled\", {\n                        done: !0,\n                        value: void 0\n                    }, null, response);\n                    buffer[nextReadIndex] = createPendingChunk(response);\n                }\n                return buffer[nextReadIndex++];\n            });\n        });\n        iterator = iterator ? iterable[ASYNC_ITERATOR]() : iterable;\n        resolveStream(response, reference, iterator, {\n            enqueueModel: function(value) {\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !1) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !1);\n                nextWriteIndex++;\n            },\n            close: function(value) {\n                closed = !0;\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !0) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !0);\n                for(nextWriteIndex++; nextWriteIndex < buffer.length;)resolveIteratorResultChunk(buffer[nextWriteIndex++], '\"$undefined\"', !0);\n            },\n            error: function(error) {\n                closed = !0;\n                for(nextWriteIndex === buffer.length && (buffer[nextWriteIndex] = createPendingChunk(response)); nextWriteIndex < buffer.length;)triggerErrorOnChunk(buffer[nextWriteIndex++], error);\n            }\n        });\n        return iterator;\n    }\n    function parseModelString(response, obj, key, value, reference) {\n        if (\"$\" === value[0]) {\n            switch(value[1]){\n                case \"$\":\n                    return value.slice(1);\n                case \"@\":\n                    return obj = parseInt(value.slice(2), 16), getChunk(response, obj);\n                case \"F\":\n                    return value = value.slice(2), value = getOutlinedModel(response, value, obj, key, createModel), loadServerReference$1(response, value.id, value.bound, initializingChunk, obj, key);\n                case \"T\":\n                    if (void 0 === reference || void 0 === response._temporaryReferences) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n                    return createTemporaryReference(response._temporaryReferences, reference);\n                case \"Q\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createMap);\n                case \"W\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createSet);\n                case \"K\":\n                    obj = value.slice(2);\n                    var formPrefix = response._prefix + obj + \"_\", data = new FormData();\n                    response._formData.forEach(function(entry, entryKey) {\n                        entryKey.startsWith(formPrefix) && data.append(entryKey.slice(formPrefix.length), entry);\n                    });\n                    return data;\n                case \"i\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, extractIterator);\n                case \"I\":\n                    return Infinity;\n                case \"-\":\n                    return \"$-0\" === value ? -0 : -Infinity;\n                case \"N\":\n                    return NaN;\n                case \"u\":\n                    return;\n                case \"D\":\n                    return new Date(Date.parse(value.slice(2)));\n                case \"n\":\n                    return BigInt(value.slice(2));\n            }\n            switch(value[1]){\n                case \"A\":\n                    return parseTypedArray(response, value, ArrayBuffer, 1, obj, key);\n                case \"O\":\n                    return parseTypedArray(response, value, Int8Array, 1, obj, key);\n                case \"o\":\n                    return parseTypedArray(response, value, Uint8Array, 1, obj, key);\n                case \"U\":\n                    return parseTypedArray(response, value, Uint8ClampedArray, 1, obj, key);\n                case \"S\":\n                    return parseTypedArray(response, value, Int16Array, 2, obj, key);\n                case \"s\":\n                    return parseTypedArray(response, value, Uint16Array, 2, obj, key);\n                case \"L\":\n                    return parseTypedArray(response, value, Int32Array, 4, obj, key);\n                case \"l\":\n                    return parseTypedArray(response, value, Uint32Array, 4, obj, key);\n                case \"G\":\n                    return parseTypedArray(response, value, Float32Array, 4, obj, key);\n                case \"g\":\n                    return parseTypedArray(response, value, Float64Array, 8, obj, key);\n                case \"M\":\n                    return parseTypedArray(response, value, BigInt64Array, 8, obj, key);\n                case \"m\":\n                    return parseTypedArray(response, value, BigUint64Array, 8, obj, key);\n                case \"V\":\n                    return parseTypedArray(response, value, DataView, 1, obj, key);\n                case \"B\":\n                    return obj = parseInt(value.slice(2), 16), response._formData.get(response._prefix + obj);\n            }\n            switch(value[1]){\n                case \"R\":\n                    return parseReadableStream(response, value, void 0);\n                case \"r\":\n                    return parseReadableStream(response, value, \"bytes\");\n                case \"X\":\n                    return parseAsyncIterable(response, value, !1);\n                case \"x\":\n                    return parseAsyncIterable(response, value, !0);\n            }\n            value = value.slice(1);\n            return getOutlinedModel(response, value, obj, key, createModel);\n        }\n        return value;\n    }\n    function createResponse(bundlerConfig, formFieldPrefix, temporaryReferences) {\n        var backingFormData = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : new FormData(), chunks = new Map();\n        return {\n            _bundlerConfig: bundlerConfig,\n            _prefix: formFieldPrefix,\n            _formData: backingFormData,\n            _chunks: chunks,\n            _closed: !1,\n            _closedReason: null,\n            _temporaryReferences: temporaryReferences\n        };\n    }\n    function close(response) {\n        reportGlobalError(response, Error(\"Connection closed.\"));\n    }\n    function loadServerReference(bundlerConfig, id, bound) {\n        var serverReference = resolveServerReference(bundlerConfig, id);\n        bundlerConfig = preloadModule(serverReference);\n        return bound ? Promise.all([\n            bound,\n            bundlerConfig\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        }) : bundlerConfig ? Promise.resolve(bundlerConfig).then(function() {\n            return requireModule(serverReference);\n        }) : Promise.resolve(requireModule(serverReference));\n    }\n    function decodeBoundActionMetaData(body, serverManifest, formFieldPrefix) {\n        body = createResponse(serverManifest, formFieldPrefix, void 0, body);\n        close(body);\n        body = getChunk(body, 0);\n        body.then(function() {});\n        if (\"fulfilled\" !== body.status) throw body.reason;\n        return body.value;\n    }\n    var ReactDOM = __webpack_require__(/*! react-dom */ \"(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js\"), React = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\"), REACT_LEGACY_ELEMENT_TYPE = Symbol.for(\"react.element\"), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\");\n    Symbol.for(\"react.postpone\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, ASYNC_ITERATOR = Symbol.asyncIterator, LocalPromise = Promise, scheduleMicrotask = \"function\" === typeof queueMicrotask ? queueMicrotask : function(callback) {\n        LocalPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\n    }, currentView = null, writtenBytes = 0, textEncoder = new TextEncoder(), CLIENT_REFERENCE_TAG$1 = Symbol.for(\"react.client.reference\"), SERVER_REFERENCE_TAG = Symbol.for(\"react.server.reference\"), FunctionBind = Function.prototype.bind, ArraySlice = Array.prototype.slice, PROMISE_PROTOTYPE = Promise.prototype, deepProxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"$$id\":\n                    return target.$$id;\n                case \"$$async\":\n                    return target.$$async;\n                case \"name\":\n                    return target.name;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n                case \"then\":\n                    throw Error(\"Cannot await or return from a thenable. You cannot await a client module from a server component.\");\n            }\n            throw Error(\"Cannot access \" + (String(target.name) + \".\" + String(name)) + \" on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, proxyHandlers$1 = {\n        get: function(target, name) {\n            return getReference(target, name);\n        },\n        getOwnPropertyDescriptor: function(target, name) {\n            var descriptor = Object.getOwnPropertyDescriptor(target, name);\n            descriptor || (descriptor = {\n                value: getReference(target, name),\n                writable: !1,\n                configurable: !1,\n                enumerable: !1\n            }, Object.defineProperty(target, name, descriptor));\n            return descriptor;\n        },\n        getPrototypeOf: function() {\n            return PROMISE_PROTOTYPE;\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, previousDispatcher = ReactDOMSharedInternals.d;\n    ReactDOMSharedInternals.d = {\n        f: previousDispatcher.f,\n        r: previousDispatcher.r,\n        D: function(href) {\n            if (\"string\" === typeof href && href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"D|\" + href;\n                    hints.has(key) || (hints.add(key), emitHint(request, \"D\", href));\n                } else previousDispatcher.D(href);\n            }\n        },\n        C: function(href, crossOrigin) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"C|\" + (null == crossOrigin ? \"null\" : crossOrigin) + \"|\" + href;\n                    hints.has(key) || (hints.add(key), \"string\" === typeof crossOrigin ? emitHint(request, \"C\", [\n                        href,\n                        crossOrigin\n                    ]) : emitHint(request, \"C\", href));\n                } else previousDispatcher.C(href, crossOrigin);\n            }\n        },\n        L: function(href, as, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"L\";\n                    if (\"image\" === as && options) {\n                        var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes, uniquePart = \"\";\n                        \"string\" === typeof imageSrcSet && \"\" !== imageSrcSet ? (uniquePart += \"[\" + imageSrcSet + \"]\", \"string\" === typeof imageSizes && (uniquePart += \"[\" + imageSizes + \"]\")) : uniquePart += \"[][]\" + href;\n                        key += \"[image]\" + uniquePart;\n                    } else key += \"[\" + as + \"]\" + href;\n                    hints.has(key) || (hints.add(key), (options = trimOptions(options)) ? emitHint(request, \"L\", [\n                        href,\n                        as,\n                        options\n                    ]) : emitHint(request, \"L\", [\n                        href,\n                        as\n                    ]));\n                } else previousDispatcher.L(href, as, options);\n            }\n        },\n        m: function(href, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"m|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"m\", [\n                        href,\n                        options\n                    ]) : emitHint(request, \"m\", href);\n                }\n                previousDispatcher.m(href, options);\n            }\n        },\n        X: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"X|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"X\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"X\", src);\n                }\n                previousDispatcher.X(src, options);\n            }\n        },\n        S: function(href, precedence, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"S|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"S\", [\n                        href,\n                        \"string\" === typeof precedence ? precedence : 0,\n                        options\n                    ]) : \"string\" === typeof precedence ? emitHint(request, \"S\", [\n                        href,\n                        precedence\n                    ]) : emitHint(request, \"S\", href);\n                }\n                previousDispatcher.S(href, precedence, options);\n            }\n        },\n        M: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"M|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"M\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"M\", src);\n                }\n                previousDispatcher.M(src, options);\n            }\n        }\n    };\n    var frameRegExp = /^ {3} at (?:(.+) \\((?:(.+):(\\d+):(\\d+)|<anonymous>)\\)|(?:async )?(.+):(\\d+):(\\d+)|<anonymous>)$/, supportsRequestStorage = \"function\" === typeof AsyncLocalStorage, requestStorage = supportsRequestStorage ? new AsyncLocalStorage() : null, supportsComponentStorage = supportsRequestStorage, componentStorage = supportsComponentStorage ? new AsyncLocalStorage() : null;\n    \"object\" === typeof async_hooks ? async_hooks.createHook : function() {\n        return {\n            enable: function() {},\n            disable: function() {}\n        };\n    };\n    \"object\" === typeof async_hooks ? async_hooks.executionAsyncId : null;\n    var TEMPORARY_REFERENCE_TAG = Symbol.for(\"react.temporary.reference\"), proxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"name\":\n                    return;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n            }\n            throw Error(\"Cannot access \" + String(name) + \" on the server. You cannot dot into a temporary client reference from a server component. You can only pass the value through to the client.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a temporary client reference from a server module.\");\n        }\n    }, SuspenseException = Error(\"Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\\n\\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`.\"), suspendedThenable = null, currentRequest$1 = null, thenableIndexCounter = 0, thenableState = null, currentComponentDebugInfo = null, HooksDispatcher = {\n        readContext: unsupportedContext,\n        use: function(usable) {\n            if (null !== usable && \"object\" === typeof usable || \"function\" === typeof usable) {\n                if (\"function\" === typeof usable.then) {\n                    var index = thenableIndexCounter;\n                    thenableIndexCounter += 1;\n                    null === thenableState && (thenableState = []);\n                    return trackUsedThenable(thenableState, usable, index);\n                }\n                usable.$$typeof === REACT_CONTEXT_TYPE && unsupportedContext();\n            }\n            if (isClientReference(usable)) {\n                if (null != usable.value && usable.value.$$typeof === REACT_CONTEXT_TYPE) throw Error(\"Cannot read a Client Context from a Server Component.\");\n                throw Error(\"Cannot use() an already resolved Client Reference.\");\n            }\n            throw Error(\"An unsupported type was passed to use(): \" + String(usable));\n        },\n        useCallback: function(callback) {\n            return callback;\n        },\n        useContext: unsupportedContext,\n        useEffect: unsupportedHook,\n        useImperativeHandle: unsupportedHook,\n        useLayoutEffect: unsupportedHook,\n        useInsertionEffect: unsupportedHook,\n        useMemo: function(nextCreate) {\n            return nextCreate();\n        },\n        useReducer: unsupportedHook,\n        useRef: unsupportedHook,\n        useState: unsupportedHook,\n        useDebugValue: function() {},\n        useDeferredValue: unsupportedHook,\n        useTransition: unsupportedHook,\n        useSyncExternalStore: unsupportedHook,\n        useId: function() {\n            if (null === currentRequest$1) throw Error(\"useId can only be used while React is rendering\");\n            var id = currentRequest$1.identifierCount++;\n            return \":\" + currentRequest$1.identifierPrefix + \"S\" + id.toString(32) + \":\";\n        },\n        useHostTransitionStatus: unsupportedHook,\n        useFormState: unsupportedHook,\n        useActionState: unsupportedHook,\n        useOptimistic: unsupportedHook,\n        useMemoCache: function(size) {\n            for(var data = Array(size), i = 0; i < size; i++)data[i] = REACT_MEMO_CACHE_SENTINEL;\n            return data;\n        },\n        useCacheRefresh: function() {\n            return unsupportedRefresh;\n        }\n    }, currentOwner = null, DefaultAsyncDispatcher = {\n        getCacheForType: function(resourceType) {\n            var cache = (cache = resolveRequest()) ? cache.cache : new Map();\n            var entry = cache.get(resourceType);\n            void 0 === entry && (entry = resourceType(), cache.set(resourceType, entry));\n            return entry;\n        }\n    };\n    DefaultAsyncDispatcher.getOwner = resolveOwner;\n    var ReactSharedInternalsServer = React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n    if (!ReactSharedInternalsServer) throw Error('The \"react\" package in this environment is not configured correctly. The \"react-server\" condition must be enabled in any environment that runs React Server Components.');\n    var prefix, suffix;\n    new (\"function\" === typeof WeakMap ? WeakMap : Map)();\n    var lastResetTime = 0;\n    if (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n        var localPerformance = performance;\n        var getCurrentTime = function() {\n            return localPerformance.now();\n        };\n    } else {\n        var localDate = Date;\n        getCurrentTime = function() {\n            return localDate.now();\n        };\n    }\n    var callComponent = {\n        \"react-stack-bottom-frame\": function(Component, props, componentDebugInfo) {\n            currentOwner = componentDebugInfo;\n            try {\n                return Component(props, void 0);\n            } finally{\n                currentOwner = null;\n            }\n        }\n    }, callComponentInDEV = callComponent[\"react-stack-bottom-frame\"].bind(callComponent), callLazyInit = {\n        \"react-stack-bottom-frame\": function(lazy) {\n            var init = lazy._init;\n            return init(lazy._payload);\n        }\n    }, callLazyInitInDEV = callLazyInit[\"react-stack-bottom-frame\"].bind(callLazyInit), callIterator = {\n        \"react-stack-bottom-frame\": function(iterator, progress, error) {\n            iterator.next().then(progress, error);\n        }\n    }, callIteratorInDEV = callIterator[\"react-stack-bottom-frame\"].bind(callIterator), isArrayImpl = Array.isArray, getPrototypeOf = Object.getPrototypeOf, jsxPropsParents = new WeakMap(), jsxChildrenParents = new WeakMap(), CLIENT_REFERENCE_TAG = Symbol.for(\"react.client.reference\"), doNotLimit = new WeakSet();\n    \"object\" === typeof console && null !== console && (patchConsole(console, \"assert\"), patchConsole(console, \"debug\"), patchConsole(console, \"dir\"), patchConsole(console, \"dirxml\"), patchConsole(console, \"error\"), patchConsole(console, \"group\"), patchConsole(console, \"groupCollapsed\"), patchConsole(console, \"groupEnd\"), patchConsole(console, \"info\"), patchConsole(console, \"log\"), patchConsole(console, \"table\"), patchConsole(console, \"trace\"), patchConsole(console, \"warn\"));\n    var ObjectPrototype = Object.prototype, stringify = JSON.stringify, PENDING$1 = 0, COMPLETED = 1, ABORTED = 3, ERRORED$1 = 4, RENDERING = 5, OPENING = 10, ABORTING = 12, CLOSING = 13, CLOSED = 14, PRERENDER = 21, currentRequest = null, debugID = null, modelRoot = !1, emptyRoot = {}, chunkCache = new Map(), hasOwnProperty = Object.prototype.hasOwnProperty;\n    Chunk.prototype = Object.create(Promise.prototype);\n    Chunk.prototype.then = function(resolve, reject) {\n        switch(this.status){\n            case \"resolved_model\":\n                initializeModelChunk(this);\n        }\n        switch(this.status){\n            case \"fulfilled\":\n                resolve(this.value);\n                break;\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                resolve && (null === this.value && (this.value = []), this.value.push(resolve));\n                reject && (null === this.reason && (this.reason = []), this.reason.push(reject));\n                break;\n            default:\n                reject(this.reason);\n        }\n    };\n    var initializingChunk = null, initializingChunkBlockedModel = null;\n    exports.createClientModuleProxy = function(moduleId) {\n        moduleId = registerClientReferenceImpl({}, moduleId, !1);\n        return new Proxy(moduleId, proxyHandlers$1);\n    };\n    exports.createTemporaryReferenceSet = function() {\n        return new WeakMap();\n    };\n    exports.decodeAction = function(body, serverManifest) {\n        var formData = new FormData(), action = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_\") ? key.startsWith(\"$ACTION_REF_\") ? (value = \"$ACTION_\" + key.slice(12) + \":\", value = decodeBoundActionMetaData(body, serverManifest, value), action = loadServerReference(serverManifest, value.id, value.bound)) : key.startsWith(\"$ACTION_ID_\") && (value = key.slice(11), action = loadServerReference(serverManifest, value, null)) : formData.append(key, value);\n        });\n        return null === action ? null : action.then(function(fn) {\n            return fn.bind(null, formData);\n        });\n    };\n    exports.decodeFormState = function(actionResult, body, serverManifest) {\n        var keyPath = body.get(\"$ACTION_KEY\");\n        if (\"string\" !== typeof keyPath) return Promise.resolve(null);\n        var metaData = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_REF_\") && (value = \"$ACTION_\" + key.slice(12) + \":\", metaData = decodeBoundActionMetaData(body, serverManifest, value));\n        });\n        if (null === metaData) return Promise.resolve(null);\n        var referenceId = metaData.id;\n        return Promise.resolve(metaData.bound).then(function(bound) {\n            return null === bound ? null : [\n                actionResult,\n                keyPath,\n                referenceId,\n                bound.length - 1\n            ];\n        });\n    };\n    exports.decodeReply = function(body, webpackMap, options) {\n        if (\"string\" === typeof body) {\n            var form = new FormData();\n            form.append(\"0\", body);\n            body = form;\n        }\n        body = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0, body);\n        webpackMap = getChunk(body, 0);\n        close(body);\n        return webpackMap;\n    };\n    exports.decodeReplyFromAsyncIterable = function(iterable, webpackMap, options) {\n        function progress(entry) {\n            if (entry.done) close(response$jscomp$0);\n            else {\n                entry = entry.value;\n                var name = entry[0];\n                entry = entry[1];\n                if (\"string\" === typeof entry) {\n                    var response = response$jscomp$0;\n                    response._formData.append(name, entry);\n                    var prefix = response._prefix;\n                    name.startsWith(prefix) && (response = response._chunks, name = +name.slice(prefix.length), (prefix = response.get(name)) && resolveModelChunk(prefix, entry, name));\n                } else response$jscomp$0._formData.append(name, entry);\n                iterator.next().then(progress, error);\n            }\n        }\n        function error(reason) {\n            reportGlobalError(response$jscomp$0, reason);\n            \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error);\n        }\n        var iterator = iterable[ASYNC_ITERATOR](), response$jscomp$0 = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0);\n        iterator.next().then(progress, error);\n        return getChunk(response$jscomp$0, 0);\n    };\n    exports.registerClientReference = function(proxyImplementation, id, exportName) {\n        return registerClientReferenceImpl(proxyImplementation, id + \"#\" + exportName, !1);\n    };\n    exports.registerServerReference = function(reference, id, exportName) {\n        return Object.defineProperties(reference, {\n            $$typeof: {\n                value: SERVER_REFERENCE_TAG\n            },\n            $$id: {\n                value: null === exportName ? id : id + \"#\" + exportName,\n                configurable: !0\n            },\n            $$bound: {\n                value: null,\n                configurable: !0\n            },\n            $$location: {\n                value: Error(\"react-stack-top-frame\"),\n                configurable: !0\n            },\n            bind: {\n                value: bind,\n                configurable: !0\n            }\n        });\n    };\n    // This is a patch added by Next.js\n    const setTimeoutOrImmediate = typeof globalThis['set' + 'Immediate'] === 'function' && // edge runtime sandbox defines a stub for setImmediate\n    // (see 'addStub' in packages/next/src/server/web/sandbox/context.ts)\n    // but it's made non-enumerable, so we can detect it\n    globalThis.propertyIsEnumerable('setImmediate') ? globalThis['set' + 'Immediate'] : setTimeout;\n    exports.renderToReadableStream = function(model, webpackMap, options) {\n        var request = createRequest(model, webpackMap, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0);\n        if (options && options.signal) {\n            var signal = options.signal;\n            if (signal.aborted) abort(request, signal.reason);\n            else {\n                var listener = function() {\n                    abort(request, signal.reason);\n                    signal.removeEventListener(\"abort\", listener);\n                };\n                signal.addEventListener(\"abort\", listener);\n            }\n        }\n        return new ReadableStream({\n            type: \"bytes\",\n            start: function() {\n                startWork(request);\n            },\n            pull: function(controller) {\n                startFlowing(request, controller);\n            },\n            cancel: function(reason) {\n                request.destination = null;\n                abort(request, reason);\n            }\n        }, {\n            highWaterMark: 0\n        });\n    };\n    exports.unstable_prerender = function(model, webpackMap, options) {\n        return new Promise(function(resolve, reject) {\n            var request = createPrerenderRequest(model, webpackMap, function() {\n                var stream = new ReadableStream({\n                    type: \"bytes\",\n                    start: function() {\n                        startWork(request);\n                    },\n                    pull: function(controller) {\n                        startFlowing(request, controller);\n                    },\n                    cancel: function(reason) {\n                        request.destination = null;\n                        abort(request, reason);\n                    }\n                }, {\n                    highWaterMark: 0\n                });\n                resolve({\n                    prelude: stream\n                });\n            }, reject, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0);\n            if (options && options.signal) {\n                var signal = options.signal;\n                if (signal.aborted) abort(request, signal.reason);\n                else {\n                    var listener = function() {\n                        abort(request, signal.reason);\n                        signal.removeEventListener(\"abort\", listener);\n                    };\n                    signal.addEventListener(\"abort\", listener);\n                }\n            }\n            startWork(request);\n        });\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\n");

/***/ })

});