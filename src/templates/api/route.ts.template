import { NextRequest } from 'next/server';
import { auth } from '@clerk/nextjs';
import { db } from '@/lib/db';
import { z } from 'zod';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

// Replace with your schema
const schema = z.object({
  // Add your schema fields here
});

export async function GET(request: NextRequest) {
  try {
    const { userId } = auth();
    if (!userId) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Add your GET logic here
    const result = await db.YOUR_MODEL.findMany({
      where: { userId },
    });

    return Response.json(result);
  } catch (error) {
    if (error instanceof PrismaClientKnownRequestError) {
      console.error('Database error:', error);
      return Response.json(
        { error: 'Database operation failed' },
        { status: 500 }
      );
    }

    console.error('Error:', error);
    return Response.json(
      { error: 'Operation failed' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const { userId } = auth();
    if (!userId) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const validatedData = schema.parse(body);

    const result = await db.YOUR_MODEL.create({
      data: {
        ...validatedData,
        userId,
      },
    });

    return Response.json(result, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return Response.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      );
    }

    if (error instanceof PrismaClientKnownRequestError) {
      console.error('Database error:', error);
      return Response.json(
        { error: 'Database operation failed' },
        { status: 500 }
      );
    }

    console.error('Error:', error);
    return Response.json(
      { error: 'Operation failed' },
      { status: 500 }
    );
  }
}