import { NextRequest } from 'next/server';
import { auth } from '@clerk/nextjs';
import { db } from '@/lib/db';
import { z } from 'zod';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

// Replace with your schema
const updateSchema = z.object({
  // Add your schema fields here
}).partial();

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { userId } = auth();
    if (!userId) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const result = await db.YOUR_MODEL.findUnique({
      where: { id: params.id, userId },
    });

    if (!result) {
      return Response.json(
        { error: 'Not found' },
        { status: 404 }
      );
    }

    return Response.json(result);
  } catch (error) {
    if (error instanceof PrismaClientKnownRequestError) {
      console.error('Database error:', error);
      return Response.json(
        { error: 'Database operation failed' },
        { status: 500 }
      );
    }

    console.error('Error:', error);
    return Response.json(
      { error: 'Operation failed' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { userId } = auth();
    if (!userId) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const validatedData = updateSchema.parse(body);

    const result = await db.YOUR_MODEL.update({
      where: { id: params.id, userId },
      data: validatedData,
    });

    return Response.json(result);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return Response.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      );
    }

    if (error instanceof PrismaClientKnownRequestError) {
      if ((error as any).code === 'P2025') {
        return Response.json(
          { error: 'Not found or unauthorized' },
          { status: 404 }
        );
      }

      console.error('Database error:', error);
      return Response.json(
        { error: 'Database operation failed' },
        { status: 500 }
      );
    }

    console.error('Error:', error);
    return Response.json(
      { error: 'Operation failed' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { userId } = auth();
    if (!userId) {
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    await db.YOUR_MODEL.delete({
      where: { id: params.id, userId },
    });

    return new Response(null, { status: 204 });
  } catch (error) {
    if (error instanceof PrismaClientKnownRequestError) {
      if ((error as any).code === 'P2025') {
        return Response.json(
          { error: 'Not found or unauthorized' },
          { status: 404 }
        );
      }

      console.error('Database error:', error);
      return Response.json(
        { error: 'Database operation failed' },
        { status: 500 }
      );
    }

    console.error('Error:', error);
    return Response.json(
      { error: 'Operation failed' },
      { status: 500 }
    );
  }
}